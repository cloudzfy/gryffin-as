%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: architecture.pdf
%%Creator: Adobe Acrobat 11.0.3
%%For: Cloudzfy
%%CreationDate: 2013/9/28, 10:56:14
%%BoundingBox: -1 0 561 524
%%HiResBoundingBox: 0 0 560.4001 523.4940
%%CropBox: 0 0 560.4001 523.4940
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 953 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2013-09-28T10:55:30+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2013"
   xmp:ModifyDate="2013-09-28T10:55:30+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Cloudzfy Chen</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -523.494 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 523.494 li
560.4 523.494 li
560.4 0 li
cp
clp
gsave
-.775017 524.025 mo
561.225 524.025 li
561.225 -.975037 li
-.775017 -.975037 li
cp
clp
141.425 222.415 mo
559.025 222.415 li
559.025 1.375 li
141.425 1.375 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
.051 sep
ef
.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
141.425 222.415 mo
559.025 222.415 li
559.025 1.375 li
141.425 1.375 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
100.325 365.935 mo
78.885 382.315 78.255 409.355 98.925 426.345 cv
106.345 432.445 115.895 436.665 126.345 438.455 cv
125.455 467.273 154.215 491.208 190.585 491.917 cv
203.645 492.172 216.515 489.341 227.545 483.786 cv
243.285 510.152 283.025 521.414 316.305 508.94 cv
328.255 504.459 338.255 497.262 345.035 488.263 cv
381.485 507.471 430.685 499.63 454.935 470.749 cv
463.635 460.373 468.255 448.175 468.195 435.715 cv
501.155 429.775 521.795 403.785 514.295 377.675 cv
511.605 368.285 505.445 359.755 496.615 353.145 cv
511.965 336.015 506.875 312.265 485.245 300.105 cv
477.475 295.735 468.245 293.295 458.725 293.095 cv
445.635 258.695 399.835 239.195 356.405 249.565 cv
340.805 253.285 326.955 260.605 316.615 270.585 cv
293.065 240.595 243.305 231.405 205.455 250.065 cv
191.855 256.765 181.085 266.515 174.505 278.085 cv
132.965 274.795 95.925 298.805 91.765 331.725 cv
90.275 343.545 93.255 355.455 100.325 365.935 cv
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
2.16 lw
100.325 365.935 mo
78.885 382.315 78.255 409.355 98.925 426.345 cv
106.345 432.445 115.895 436.665 126.345 438.455 cv
125.455 467.273 154.215 491.208 190.585 491.917 cv
203.645 492.172 216.515 489.341 227.545 483.786 cv
243.285 510.152 283.025 521.414 316.305 508.94 cv
328.255 504.459 338.255 497.262 345.035 488.263 cv
381.485 507.471 430.685 499.63 454.935 470.749 cv
463.635 460.373 468.255 448.175 468.195 435.715 cv
501.155 429.775 521.795 403.785 514.295 377.675 cv
511.605 368.285 505.445 359.755 496.615 353.145 cv
511.965 336.015 506.875 312.265 485.245 300.105 cv
477.475 295.735 468.245 293.295 458.725 293.095 cv
445.635 258.695 399.835 239.195 356.405 249.565 cv
340.805 253.285 326.955 260.605 316.615 270.585 cv
293.065 240.595 243.305 231.405 205.455 250.065 cv
191.855 256.765 181.085 266.515 174.505 278.085 cv
132.965 274.795 95.925 298.805 91.765 331.725 cv
90.275 343.545 93.255 355.455 100.325 365.935 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
28.085 119.765 mo
28.085 114.825 24.075 110.815 19.135 110.815 cv
14.195 110.815 10.185 114.825 10.185 119.765 cv
10.185 124.705 14.195 128.715 19.135 128.715 cv
24.075 128.715 28.085 124.705 28.085 119.765 cv
cp
29.395 131.135 mo
8.65498 131.135 li
4.63499 131.135 1.37498 134.395 1.37498 138.415 cv
1.37498 163.815 li
7.04498 163.815 li
7.04498 149.035 li
8.94498 149.035 li
8.94498 182.815 li
18.185 182.815 li
18.185 167.715 li
18.185 167.195 18.615 166.765 19.135 166.765 cv
19.655 166.765 20.085 167.195 20.085 167.715 cv
20.085 182.815 li
29.865 182.815 li
29.865 148.985 li
31.755 148.985 li
31.755 163.815 li
36.675 163.815 li
36.675 138.415 li
36.675 134.405 33.415 131.135 29.395 131.135 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75 lw
28.085 119.765 mo
28.085 114.825 24.075 110.815 19.135 110.815 cv
14.195 110.815 10.185 114.825 10.185 119.765 cv
10.185 124.705 14.195 128.715 19.135 128.715 cv
24.075 128.715 28.085 124.705 28.085 119.765 cv
cp
29.395 131.135 mo
8.65498 131.135 li
4.63499 131.135 1.37498 134.395 1.37498 138.415 cv
1.37498 163.815 li
7.04498 163.815 li
7.04498 149.035 li
8.94498 149.035 li
8.94498 182.815 li
18.185 182.815 li
18.185 167.715 li
18.185 167.195 18.615 166.765 19.135 166.765 cv
19.655 166.765 20.085 167.195 20.085 167.715 cv
20.085 182.815 li
29.865 182.815 li
29.865 148.985 li
31.755 148.985 li
31.755 163.815 li
36.675 163.815 li
36.675 138.415 li
36.675 134.405 33.415 131.135 29.395 131.135 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
36.005 178.335 mo
36.005 179.915 37.285 181.375 38.845 181.585 cv
38.845 181.585 48.135 182.815 55.025 182.815 cv
61.915 182.815 71.205 181.585 71.205 181.585 cv
72.765 181.375 74.045 179.915 74.045 178.335 cv
74.045 115.295 li
74.045 113.715 72.765 112.255 71.205 112.045 cv
71.205 112.045 62.085 110.815 55.025 110.815 cv
48.135 110.815 38.845 112.045 38.845 112.045 cv
37.285 112.255 36.005 113.715 36.005 115.295 cv
36.005 178.335 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
36.005 178.335 mo
36.005 179.915 37.285 181.375 38.845 181.585 cv
38.845 181.585 48.135 182.815 55.025 182.815 cv
61.915 182.815 71.205 181.585 71.205 181.585 cv
72.765 181.375 74.045 179.915 74.045 178.335 cv
74.045 115.295 li
74.045 113.715 72.765 112.255 71.205 112.045 cv
71.205 112.045 62.085 110.815 55.025 110.815 cv
48.135 110.815 38.845 112.045 38.845 112.045 cv
37.285 112.255 36.005 113.715 36.005 115.295 cv
36.005 178.335 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
38.875 173.975 mo
71.18 173.975 li
71.18 121.051 li
38.875 121.051 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
38.875 173.975 mo
71.18 173.975 li
71.18 121.051 li
38.875 121.051 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
51.655 177.945 mo
51.655 177.235 51.075 176.665 50.375 176.665 cv
49.665 176.665 49.095 177.235 49.095 177.945 cv
49.095 178.645 49.665 179.225 50.375 179.225 cv
51.075 179.225 51.655 178.645 51.655 177.945 cv
cp
56.305 177.945 mo
56.305 177.235 55.735 176.665 55.025 176.665 cv
54.325 176.665 53.745 177.235 53.745 177.945 cv
53.745 178.645 54.325 179.225 55.025 179.225 cv
55.735 179.225 56.305 178.645 56.305 177.945 cv
cp
60.965 177.945 mo
60.965 177.235 60.395 176.665 59.685 176.665 cv
58.975 176.665 58.405 177.235 58.405 177.945 cv
58.405 178.645 58.975 179.225 59.685 179.225 cv
60.395 179.225 60.965 178.645 60.965 177.945 cv
cp
ef
50.275 116.695 mo
59.785 116.695 li
@
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 67 /C put
dup 73 /I put
dup 77 /M put
dup 83 /S put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 116 /t put
def
/FontBBox {-665 -325 2046 1040} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
11 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/space <1C60D8A8C9B854D00D> |-
/C <1C60D8A8C9B6079F6D1C46AC2732DFBDC9143C94793529C1940296210AAD
6EE09C39CFC4DAB7C5F3BA33C9E10838E0BC6FC9318A4E57F309EE20438B434C
69AE73A499211EBA75E22A57C1581D93869428818DC700A28C027571D7047CDF
A8B017AACDE96DE4B2579EFD2C826A30F6EBDDC52701A22CDD669ADC60B66F32
261A1F55EDEF9802FD4511E0EF130772EDFD708A4113A1EDB1E717E0FA7D3148
51DE59> |-
/I <1C60D8A8C9B854D0F463D3892D665712D6B7D6A81E> |-
/M <1C60D8A8C9B6B41CBB4B6664BFFC865F56E6FEAFA79E7B90883C1C68AFB3
79AC174B0F8DCC9294E2C26BD06BBA9FD3867F8768651EF4BA798B4F538FCE8F
80AF5A83421F8F> |-
/S <1C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E558E
3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051BE
47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE626CDC6D4C322BB39
1537921D673F5AEE3EC19E36E7EFEC0F06A0EA4EAAB6BBA94DDCD11A6A564B13
B510F8C915848233B82F046D854DCD4F1639F149305DC73D3C68DF8AEB47A96A
30E55CF8BAD07FA2825BCE0D675F1CC2EBE61B07B772130E23119250F1EBF8FE
12A2098D9F09F3F21BDC41666CA4A0BB70D5F0A750B44BB93A5FBFDD2BF8DE45
0B277265536F77D5BD6F44FB72FF2E708C60107653AE44BFFB26AFF8> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B17
1C8A80AB> |-
/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-
/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C
0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDAD
E9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A520
3A8015DD09B7CE> |-
/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D06
5152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CF
AD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F
5C42C88FB43C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/MQPSPM+ArialMT /ArialMT findfont ct_VMDictPut
/MQPSPM+ArialMT*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 5{/.notdef}rp /I 3{/.notdef}rp /M 
5{/.notdef}rp /S 17{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n 5{/.notdef}rp /t 139{/.notdef}rp]
MQPSPM+ArialMT nf
MQPSPM+ArialMT*1 [15.856 0 0 -15.856 0 0 ]msf
18.195 201.365 mo
(IMS Client)
[4.5031 13.2079 10.5761 4.47137 11.67 3.39319 3.75787 8.67323 9.0379 0 ]xsh
318.055 79.985 mo
348.415 79.985 li
@
295.555 72.905 mo
341.615 72.905 li
341.615 40.575 li
295.555 40.575 li
295.555 72.905 li
cp
348.415 94.655 mo
367.555 94.655 li
367.555 64.665 li
348.415 64.665 li
348.415 94.655 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
295.555 72.905 mo
341.615 72.905 li
341.615 40.575 li
295.555 40.575 li
295.555 72.905 li
cp
348.415 94.655 mo
367.555 94.655 li
367.555 64.665 li
348.415 64.665 li
348.415 94.655 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
295.555 46.615 mo
341.625 46.615 li
341.625 40.575 li
295.555 40.575 li
295.555 46.615 li
cp
355.795 89.745 mo
365.125 89.745 li
365.125 88.995 li
355.795 88.995 li
355.795 89.745 li
cp
355.795 87.465 mo
365.125 87.465 li
365.125 86.715 li
355.795 86.715 li
355.795 87.465 li
cp
355.795 85.195 mo
365.125 85.195 li
365.125 84.445 li
355.795 84.445 li
355.795 85.195 li
cp
364.935 80.695 mo
364.935 80.055 364.415 79.535 363.775 79.535 cv
363.135 79.535 362.615 80.055 362.615 80.695 cv
362.615 81.335 363.135 81.8549 363.775 81.8549 cv
364.415 81.8549 364.935 81.335 364.935 80.695 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
295.555 46.615 mo
341.625 46.615 li
341.625 40.575 li
295.555 40.575 li
295.555 46.615 li
cp
355.795 89.745 mo
365.125 89.745 li
365.125 88.995 li
355.795 88.995 li
355.795 89.745 li
cp
355.795 87.465 mo
365.125 87.465 li
365.125 86.715 li
355.795 86.715 li
355.795 87.465 li
cp
355.795 85.195 mo
365.125 85.195 li
365.125 84.445 li
355.795 84.445 li
355.795 85.195 li
cp
364.935 80.695 mo
364.935 80.055 364.415 79.535 363.775 79.535 cv
363.135 79.535 362.615 80.055 362.615 80.695 cv
362.615 81.335 363.135 81.8549 363.775 81.8549 cv
364.415 81.8549 364.935 81.335 364.935 80.695 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
338.935 43.225 mo
337.845 42.145 li
337.475 42.5049 li
338.565 43.595 li
337.475 44.675 li
337.845 45.045 li
338.935 43.955 li
340.015 45.045 li
340.385 44.675 li
339.295 43.595 li
340.385 42.5049 li
340.015 42.145 li
338.935 43.225 li
cp
ef
301.105 68.3849 mo
310.285 68.3849 li
310.285 63.735 li
301.105 63.735 li
301.105 68.3849 li
cp
301.215 60.615 mo
310.405 60.615 li
310.405 50.495 li
301.215 50.495 li
301.215 60.615 li
cp
312.535 68.3849 mo
335.455 68.3849 li
335.455 63.735 li
312.535 63.735 li
312.535 68.3849 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
301.105 68.3849 mo
310.285 68.3849 li
310.285 63.735 li
301.105 63.735 li
301.105 68.3849 li
cp
301.215 60.615 mo
310.405 60.615 li
310.405 50.495 li
301.215 50.495 li
301.215 60.615 li
cp
312.535 68.3849 mo
335.455 68.3849 li
335.455 63.735 li
312.535 63.735 li
312.535 68.3849 li
cp
313.235 57.125 mo
335.875 57.125 li
313.235 54.335 mo
335.875 54.335 li
313.235 51.545 mo
335.875 51.545 li
313.235 59.915 mo
323.145 59.915 li
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
MQPSPM+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C2329F
7F6ED1937D1E8A10> |-
/R <1C60D8A8C9B6079F62E89B521DCDBE3DC5497B8DD99916239C0DFA5ED4F6
32B33575F4260343AF5DB7D477D12055F49C5E99C0AC176EAD42723223937F2B
A15ECAD7751CB6A136B700EE485E38E7CDB87D9465C90BB8E29B04FDDA42609F
BC3833B9FB5105619F4CC434003085F449D9FD5022725306B331FB97B31D2952
57B180DE1FD5465D256CCA19301DA97326882845130A5257BF61307ABA64C3F0
B222> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MQPSPM+ArialMT /Encoding get
dup 70 /F put
dup 82 /R put
pop
%ADOEndSubsetFont
/MQPSPM+ArialMT*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 2{/.notdef}rp /F 2{/.notdef}rp /I 
3{/.notdef}rp /M 4{/.notdef}rp /R /S 17{/.notdef}rp /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n 5{/.notdef}rp /t 139{/.notdef}rp]
MQPSPM+ArialMT nf
MQPSPM+ArialMT*1 [15.832 0 0 -15.832 0 0 ]msf
308.665 122.125 mo
(MRFC)
[13.1879 11.6682 9.78409 0 ]xsh
205.785 163.125 mo
234.515 163.125 li
@
234.515 179.485 mo
256.626 179.485 li
256.626 144.849 li
234.515 144.849 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
234.515 179.485 mo
256.626 179.485 li
256.626 144.849 li
234.515 144.849 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
227.715 143.545 mo
227.715 145.895 225.805 147.795 223.455 147.795 cv
205.485 147.855 li
205.485 147.855 205.155 147.735 205.155 149.985 cv
205.155 151.715 206.215 154.775 206.215 154.775 cv
200.365 152.575 200.105 147.795 200.105 147.795 cv
188.885 147.795 li
186.535 147.795 184.625 145.895 184.625 143.545 cv
184.625 118.395 li
184.625 116.045 186.535 114.145 188.885 114.145 cv
223.455 114.145 li
225.805 114.145 227.715 116.045 227.715 118.395 cv
227.715 143.545 li
cp
243.035 173.805 mo
253.815 173.805 li
253.815 172.945 li
243.035 172.945 li
243.035 173.805 li
cp
243.035 171.185 mo
253.815 171.185 li
253.815 170.315 li
243.035 170.315 li
243.035 171.185 li
cp
243.035 168.555 mo
253.815 168.555 li
253.815 167.685 li
243.035 167.685 li
243.035 168.555 li
cp
253.595 163.365 mo
253.595 162.625 252.995 162.025 252.255 162.025 cv
251.515 162.025 250.925 162.625 250.925 163.365 cv
250.925 164.105 251.515 164.705 252.255 164.705 cv
252.995 164.705 253.595 164.105 253.595 163.365 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
227.715 143.545 mo
227.715 145.895 225.805 147.795 223.455 147.795 cv
205.485 147.855 li
205.485 147.855 205.155 147.735 205.155 149.985 cv
205.155 151.715 206.215 154.775 206.215 154.775 cv
200.365 152.575 200.105 147.795 200.105 147.795 cv
188.885 147.795 li
186.535 147.795 184.625 145.895 184.625 143.545 cv
184.625 118.395 li
184.625 116.045 186.535 114.145 188.885 114.145 cv
223.455 114.145 li
225.805 114.145 227.715 116.045 227.715 118.395 cv
227.715 143.545 li
cp
243.035 173.805 mo
253.815 173.805 li
253.815 172.945 li
243.035 172.945 li
243.035 173.805 li
cp
243.035 171.185 mo
253.815 171.185 li
253.815 170.315 li
243.035 170.315 li
243.035 171.185 li
cp
243.035 168.555 mo
253.815 168.555 li
253.815 167.685 li
243.035 167.685 li
243.035 168.555 li
cp
253.595 163.365 mo
253.595 162.625 252.995 162.025 252.255 162.025 cv
251.515 162.025 250.925 162.625 250.925 163.365 cv
250.925 164.105 251.515 164.705 252.255 164.705 cv
252.995 164.705 253.595 164.105 253.595 163.365 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
205.045 118.545 mo
201.835 118.545 199.215 121.155 199.215 124.375 cv
199.215 127.585 201.835 130.195 205.045 130.195 cv
208.255 130.195 210.875 127.585 210.875 124.375 cv
210.875 121.155 208.255 118.545 205.045 118.545 cv
cp
205.045 117.745 mo
205.735 117.745 206.395 117.855 207.025 118.045 cv
206.655 117.485 205.915 117.025 205.045 117.025 cv
204.175 117.025 203.435 117.485 203.065 118.045 cv
203.695 117.855 204.355 117.745 205.045 117.745 cv
cp
193.065 143.375 mo
190.635 142.975 189.555 141.195 189.505 141.115 cv
185.825 134.385 188.615 127.595 188.735 127.305 cv
189.615 124.685 191.795 123.765 193.015 123.445 cv
193.505 123.325 li
193.505 129.335 li
192.445 129.335 li
192.335 129.335 192.315 129.405 192.315 129.415 cv
191.135 134.185 192.275 137.205 192.285 137.235 cv
192.325 137.345 192.405 137.395 192.535 137.395 cv
193.515 137.395 li
193.515 143.445 li
193.065 143.375 li
cp
194.335 129.335 mo
194.335 123.275 li
195.675 123.275 li
196.185 123.275 196.605 123.695 196.605 124.215 cv
196.605 128.395 li
196.605 128.915 196.185 129.335 195.675 129.335 cv
194.335 129.335 li
cp
194.335 143.445 mo
194.325 143.065 li
194.325 137.395 li
195.675 137.395 li
196.185 137.395 196.605 137.815 196.605 138.325 cv
196.605 142.515 li
196.605 143.035 196.185 143.445 195.675 143.445 cv
194.335 143.445 li
cp
209.975 129.755 mo
209.975 128.785 li
208.755 130.135 207.005 130.995 205.045 130.995 cv
203.085 130.995 201.325 130.135 200.115 128.785 cv
200.115 129.755 li
200.115 129.755 200.785 130.425 201.995 130.955 cv
201.995 133.445 li
200.585 133.445 li
200.585 134.745 li
209.675 134.745 li
209.675 133.445 li
207.965 133.445 li
207.965 131.015 li
209.255 130.475 209.975 129.755 209.975 129.755 cv
cp
221.465 128.005 mo
215.335 128.005 li
214.155 128.005 213.185 128.975 213.185 130.155 cv
213.185 137.665 li
214.865 137.665 li
214.865 133.295 li
215.425 133.295 li
215.425 143.275 li
218.155 143.275 li
218.155 138.815 li
218.155 138.665 218.275 138.535 218.435 138.535 cv
218.585 138.535 218.715 138.665 218.715 138.815 cv
218.715 143.275 li
221.605 143.275 li
221.605 133.285 li
222.165 133.285 li
222.165 137.665 li
223.615 137.665 li
223.615 130.155 li
223.615 128.975 222.655 128.005 221.465 128.005 cv
cp
221.085 124.645 mo
221.085 123.185 219.895 122.005 218.435 122.005 cv
216.975 122.005 215.795 123.185 215.795 124.645 cv
215.795 126.105 216.975 127.295 218.435 127.295 cv
219.895 127.295 221.085 126.105 221.085 124.645 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
205.045 118.545 mo
201.835 118.545 199.215 121.155 199.215 124.375 cv
199.215 127.585 201.835 130.195 205.045 130.195 cv
208.255 130.195 210.875 127.585 210.875 124.375 cv
210.875 121.155 208.255 118.545 205.045 118.545 cv
cp
205.045 117.745 mo
205.735 117.745 206.395 117.855 207.025 118.045 cv
206.655 117.485 205.915 117.025 205.045 117.025 cv
204.175 117.025 203.435 117.485 203.065 118.045 cv
203.695 117.855 204.355 117.745 205.045 117.745 cv
cp
193.065 143.375 mo
190.635 142.975 189.555 141.195 189.505 141.115 cv
185.825 134.385 188.615 127.595 188.735 127.305 cv
189.615 124.685 191.795 123.765 193.015 123.445 cv
193.505 123.325 li
193.505 129.335 li
192.445 129.335 li
192.335 129.335 192.315 129.405 192.315 129.415 cv
191.135 134.185 192.275 137.205 192.285 137.235 cv
192.325 137.345 192.405 137.395 192.535 137.395 cv
193.515 137.395 li
193.515 143.445 li
193.065 143.375 li
cp
194.335 129.335 mo
194.335 123.275 li
195.675 123.275 li
196.185 123.275 196.605 123.695 196.605 124.215 cv
196.605 128.395 li
196.605 128.915 196.185 129.335 195.675 129.335 cv
194.335 129.335 li
cp
194.335 143.445 mo
194.325 143.065 li
194.325 137.395 li
195.675 137.395 li
196.185 137.395 196.605 137.815 196.605 138.325 cv
196.605 142.515 li
196.605 143.035 196.185 143.445 195.675 143.445 cv
194.335 143.445 li
cp
209.975 129.755 mo
209.975 128.785 li
208.755 130.135 207.005 130.995 205.045 130.995 cv
203.085 130.995 201.325 130.135 200.115 128.785 cv
200.115 129.755 li
200.115 129.755 200.785 130.425 201.995 130.955 cv
201.995 133.445 li
200.585 133.445 li
200.585 134.745 li
209.675 134.745 li
209.675 133.445 li
207.965 133.445 li
207.965 131.015 li
209.255 130.475 209.975 129.755 209.975 129.755 cv
cp
221.465 128.005 mo
215.335 128.005 li
214.155 128.005 213.185 128.975 213.185 130.155 cv
213.185 137.665 li
214.865 137.665 li
214.865 133.295 li
215.425 133.295 li
215.425 143.275 li
218.155 143.275 li
218.155 138.815 li
218.155 138.665 218.275 138.535 218.435 138.535 cv
218.585 138.535 218.715 138.665 218.715 138.815 cv
218.715 143.275 li
221.605 143.275 li
221.605 133.285 li
222.165 133.285 li
222.165 137.665 li
223.615 137.665 li
223.615 130.155 li
223.615 128.975 222.655 128.005 221.465 128.005 cv
cp
221.085 124.645 mo
221.085 123.185 219.895 122.005 218.435 122.005 cv
216.975 122.005 215.795 123.185 215.795 124.645 cv
215.795 126.105 216.975 127.295 218.435 127.295 cv
219.895 127.295 221.085 126.105 221.085 124.645 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
200.605 126.945 mo
209.485 126.945 li
209.485 126.945 210.025 125.595 210.025 124.525 cv
210.025 123.445 209.485 122.095 209.485 122.095 cv
200.605 122.095 li
200.605 122.095 200.065 122.515 200.065 124.525 cv
200.065 125.555 200.605 126.945 200.605 126.945 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
200.605 126.945 mo
209.485 126.945 li
209.485 126.945 210.025 125.595 210.025 124.525 cv
210.025 123.445 209.485 122.095 209.485 122.095 cv
200.605 122.095 li
200.605 122.095 200.065 122.515 200.065 124.525 cv
200.065 125.555 200.605 126.945 200.605 126.945 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
204.975 126.205 mo
204.045 126.205 203.295 125.455 203.295 124.525 cv
203.295 123.595 204.045 122.835 204.975 122.835 cv
205.905 122.835 206.665 123.595 206.665 124.525 cv
206.665 125.455 205.905 126.205 204.975 126.205 cv
cp
204.975 123.195 mo
204.255 123.195 203.655 123.795 203.655 124.525 cv
203.655 125.245 204.255 125.845 204.975 125.845 cv
205.705 125.845 206.295 125.245 206.295 124.525 cv
206.295 123.795 205.705 123.195 204.975 123.195 cv
cp
205.385 124.355 mo
205.425 124.315 205.385 124.235 205.315 124.175 cv
205.245 124.125 205.155 124.125 205.125 124.165 cv
205.085 124.215 205.125 124.295 205.195 124.355 cv
205.265 124.405 205.355 124.405 205.385 124.355 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
204.975 126.205 mo
204.045 126.205 203.295 125.455 203.295 124.525 cv
203.295 123.595 204.045 122.835 204.975 122.835 cv
205.905 122.835 206.665 123.595 206.665 124.525 cv
206.665 125.455 205.905 126.205 204.975 126.205 cv
cp
204.975 123.195 mo
204.255 123.195 203.655 123.795 203.655 124.525 cv
203.655 125.245 204.255 125.845 204.975 125.845 cv
205.705 125.845 206.295 125.245 206.295 124.525 cv
206.295 123.795 205.705 123.195 204.975 123.195 cv
cp
205.385 124.355 mo
205.425 124.315 205.385 124.235 205.315 124.175 cv
205.245 124.125 205.155 124.125 205.125 124.165 cv
205.085 124.215 205.125 124.295 205.195 124.355 cv
205.265 124.405 205.355 124.405 205.385 124.355 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
MQPSPM+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117
C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47
CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EF
BF59B4862165C7DEA15B42BE3811C2CAA25C54> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MQPSPM+ArialMT /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
/MQPSPM+ArialMT*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C 2{/.notdef}rp /F 2{/.notdef}rp /I 
3{/.notdef}rp /M 2{/.notdef}rp /P /.notdef /R /S 17{/.notdef}rp 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 5{/.notdef}rp 
/t 139{/.notdef}rp]
MQPSPM+ArialMT nf
MQPSPM+ArialMT*1 [15.856 0 0 -15.856 0 0 ]msf
198.125 201.365 mo
(MRFP)
[13.2079 11.6542 9.78302 0 ]xsh
481.845 152.665 mo
511.065 152.665 li
@
511.065 165.425 mo
530.223 165.425 li
530.223 135.415 li
511.065 135.415 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
511.065 165.425 mo
530.223 165.425 li
530.223 135.415 li
511.065 135.415 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
505.925 123.255 mo
505.925 110.075 495.245 99.405 482.075 99.405 cv
468.905 99.405 458.225 110.075 458.225 123.255 cv
458.225 136.425 468.905 147.105 482.075 147.105 cv
495.245 147.105 505.925 136.425 505.925 123.255 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
505.925 123.255 mo
505.925 110.075 495.245 99.405 482.075 99.405 cv
468.905 99.405 458.225 110.075 458.225 123.255 cv
458.225 136.425 468.905 147.105 482.075 147.105 cv
495.245 147.105 505.925 136.425 505.925 123.255 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
499.755 115.325 mo
500.435 117.655 500.805 120.115 500.825 122.655 cv
504.955 122.655 li
504.885 120.085 504.405 117.615 503.555 115.325 cv
499.755 115.325 li
cp
500.815 123.855 mo
500.725 126.405 500.285 128.855 499.545 131.185 cv
503.555 131.185 li
504.405 128.885 504.885 126.425 504.955 123.855 cv
500.815 123.855 li
cp
499.375 114.125 mo
503.075 114.125 li
501.865 111.355 500.125 108.875 497.985 106.795 cv
495.525 106.795 li
497.165 109.005 498.465 111.475 499.375 114.125 cv
cp
499.125 132.375 mo
498.135 135.045 496.735 137.515 494.995 139.705 cv
497.985 139.705 li
500.125 137.635 501.865 135.155 503.075 132.375 cv
499.125 132.375 li
cp
494.585 105.605 mo
496.655 105.605 li
495.065 104.285 493.295 103.195 491.395 102.345 cv
492.545 103.345 493.615 104.425 494.585 105.605 cv
cp
499.575 123.855 mo
491.935 123.855 li
491.915 126.355 491.675 128.805 491.235 131.185 cv
498.255 131.185 li
499.025 128.855 499.485 126.385 499.575 123.855 cv
cp
498.475 115.325 mo
491.165 115.325 li
491.625 117.705 491.885 120.155 491.935 122.655 cv
499.585 122.655 li
499.565 120.135 499.165 117.665 498.475 115.325 cv
cp
493.985 140.905 mo
492.685 142.375 491.215 143.705 489.615 144.865 cv
492.205 143.965 494.585 142.615 496.655 140.905 cv
493.985 140.905 li
cp
497.825 132.375 mo
490.995 132.375 li
490.455 134.915 489.685 137.365 488.705 139.705 cv
493.525 139.705 li
495.325 137.555 496.785 135.075 497.825 132.375 cv
cp
488.535 106.795 mo
489.545 109.145 490.345 111.595 490.915 114.125 cv
498.095 114.125 li
497.155 111.425 495.825 108.935 494.235 106.795 cv
488.535 106.795 li
cp
492.455 140.905 mo
488.185 140.905 li
487.395 142.635 486.505 144.295 485.505 145.885 cv
485.555 145.885 485.595 145.875 485.645 145.865 cv
488.195 144.655 490.495 142.965 492.455 140.905 cv
cp
488.065 101.155 mo
487.145 100.905 486.195 100.715 485.225 100.585 cv
486.255 102.185 487.185 103.855 488.005 105.605 cv
493.285 105.605 li
491.715 103.755 489.945 102.235 488.065 101.155 cv
cp
482.675 105.605 mo
486.735 105.605 li
485.905 103.805 484.965 102.085 483.925 100.445 cv
483.515 100.405 483.095 100.385 482.675 100.375 cv
482.675 105.605 li
cp
482.675 106.795 mo
482.675 114.125 li
489.645 114.125 li
489.065 111.585 488.265 109.135 487.265 106.795 cv
482.675 106.795 li
cp
482.675 122.655 mo
490.685 122.655 li
490.635 120.145 490.375 117.695 489.905 115.325 cv
482.675 115.325 li
482.675 122.655 li
cp
486.865 140.905 mo
482.675 140.905 li
482.675 146.125 li
483.145 146.115 483.615 146.095 484.085 146.055 cv
485.115 144.425 486.045 142.705 486.865 140.905 cv
cp
482.675 131.185 mo
489.965 131.185 li
490.425 128.805 490.665 126.355 490.695 123.855 cv
482.675 123.855 li
482.675 131.185 li
cp
482.675 139.705 mo
487.395 139.705 li
488.375 137.375 489.155 134.925 489.715 132.375 cv
482.675 132.375 li
482.675 139.705 li
cp
481.475 100.375 mo
480.915 100.395 480.345 100.425 479.795 100.475 cv
478.765 102.105 477.825 103.815 477.005 105.605 cv
481.475 105.605 li
481.475 100.375 li
cp
481.475 140.905 mo
476.865 140.905 li
477.685 142.685 478.605 144.395 479.635 146.015 cv
480.235 146.075 480.855 146.115 481.475 146.125 cv
481.475 140.905 li
cp
481.475 106.795 mo
476.465 106.795 li
475.475 109.135 474.665 111.585 474.085 114.125 cv
481.475 114.125 li
481.475 106.795 li
cp
481.475 132.375 mo
474.015 132.375 li
474.575 134.925 475.365 137.375 476.345 139.705 cv
481.475 139.705 li
481.475 132.375 li
cp
481.475 115.325 mo
473.835 115.325 li
473.365 117.695 473.095 120.145 473.055 122.655 cv
481.475 122.655 li
481.475 115.325 li
cp
481.475 123.855 mo
473.045 123.855 li
473.065 126.355 473.315 128.805 473.765 131.185 cv
481.475 131.185 li
481.475 123.855 li
cp
478.165 145.775 mo
477.195 144.215 476.315 142.595 475.555 140.905 cv
471.545 140.905 li
473.455 142.915 475.695 144.575 478.165 145.775 cv
cp
470.715 105.605 mo
475.735 105.605 li
476.535 103.885 477.455 102.235 478.465 100.645 cv
477.555 100.795 476.665 100.995 475.795 101.245 cv
473.965 102.315 472.245 103.795 470.715 105.605 cv
cp
470.005 140.905 mo
467.505 140.905 li
469.495 142.555 471.765 143.865 474.245 144.765 cv
472.695 143.635 471.275 142.335 470.005 140.905 cv
cp
469.405 105.605 mo
470.325 104.485 471.335 103.455 472.425 102.495 cv
470.645 103.325 468.995 104.365 467.505 105.605 cv
469.405 105.605 li
cp
475.035 139.705 mo
474.055 137.365 473.285 134.915 472.745 132.375 cv
466.175 132.375 li
467.205 135.075 468.675 137.555 470.475 139.705 cv
475.035 139.705 li
cp
475.195 106.795 mo
469.765 106.795 li
468.165 108.935 466.835 111.425 465.905 114.125 cv
472.825 114.125 li
473.395 111.595 474.195 109.145 475.195 106.795 cv
cp
472.495 131.185 mo
472.055 128.805 471.825 126.355 471.795 123.855 cv
464.425 123.855 li
464.515 126.385 464.975 128.855 465.745 131.185 cv
472.495 131.185 li
cp
464.405 122.655 mo
471.805 122.655 li
471.855 120.155 472.115 117.705 472.575 115.325 cv
465.515 115.325 li
464.825 117.665 464.435 120.135 464.405 122.655 cv
cp
464.865 132.375 mo
461.085 132.375 li
462.285 135.155 464.025 137.635 466.175 139.705 cv
469.005 139.705 li
467.265 137.515 465.865 135.045 464.865 132.375 cv
cp
464.625 114.125 mo
465.535 111.475 466.835 109.005 468.465 106.795 cv
466.175 106.795 li
464.025 108.875 462.285 111.355 461.085 114.125 cv
464.625 114.125 li
cp
464.455 131.185 mo
463.715 128.855 463.265 126.405 463.185 123.855 cv
459.205 123.855 li
459.265 126.425 459.755 128.885 460.595 131.185 cv
464.455 131.185 li
cp
463.175 122.655 mo
463.195 120.115 463.565 117.655 464.235 115.325 cv
460.595 115.325 li
459.755 117.615 459.265 120.085 459.205 122.655 cv
463.175 122.655 li
cp
518.005 160.505 mo
527.355 160.505 li
527.355 159.755 li
518.005 159.755 li
518.005 160.505 li
cp
518.005 158.235 mo
527.355 158.235 li
527.355 157.485 li
518.005 157.485 li
518.005 158.235 li
cp
518.005 155.955 mo
527.355 155.955 li
527.355 155.205 li
518.005 155.205 li
518.005 155.955 li
cp
527.155 151.455 mo
527.155 150.815 526.635 150.295 525.995 150.295 cv
525.355 150.295 524.845 150.815 524.845 151.455 cv
524.845 152.095 525.355 152.615 525.995 152.615 cv
526.635 152.615 527.155 152.095 527.155 151.455 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
499.755 115.325 mo
500.435 117.655 500.805 120.115 500.825 122.655 cv
504.955 122.655 li
504.885 120.085 504.405 117.615 503.555 115.325 cv
499.755 115.325 li
cp
500.815 123.855 mo
500.725 126.405 500.285 128.855 499.545 131.185 cv
503.555 131.185 li
504.405 128.885 504.885 126.425 504.955 123.855 cv
500.815 123.855 li
cp
499.375 114.125 mo
503.075 114.125 li
501.865 111.355 500.125 108.875 497.985 106.795 cv
495.525 106.795 li
497.165 109.005 498.465 111.475 499.375 114.125 cv
cp
499.125 132.375 mo
498.135 135.045 496.735 137.515 494.995 139.705 cv
497.985 139.705 li
500.125 137.635 501.865 135.155 503.075 132.375 cv
499.125 132.375 li
cp
494.585 105.605 mo
496.655 105.605 li
495.065 104.285 493.295 103.195 491.395 102.345 cv
492.545 103.345 493.615 104.425 494.585 105.605 cv
cp
499.575 123.855 mo
491.935 123.855 li
491.915 126.355 491.675 128.805 491.235 131.185 cv
498.255 131.185 li
499.025 128.855 499.485 126.385 499.575 123.855 cv
cp
498.475 115.325 mo
491.165 115.325 li
491.625 117.705 491.885 120.155 491.935 122.655 cv
499.585 122.655 li
499.565 120.135 499.165 117.665 498.475 115.325 cv
cp
493.985 140.905 mo
492.685 142.375 491.215 143.705 489.615 144.865 cv
492.205 143.965 494.585 142.615 496.655 140.905 cv
493.985 140.905 li
cp
497.825 132.375 mo
490.995 132.375 li
490.455 134.915 489.685 137.365 488.705 139.705 cv
493.525 139.705 li
495.325 137.555 496.785 135.075 497.825 132.375 cv
cp
488.535 106.795 mo
489.545 109.145 490.345 111.595 490.915 114.125 cv
498.095 114.125 li
497.155 111.425 495.825 108.935 494.235 106.795 cv
488.535 106.795 li
cp
492.455 140.905 mo
488.185 140.905 li
487.395 142.635 486.505 144.295 485.505 145.885 cv
485.555 145.885 485.595 145.875 485.645 145.865 cv
488.195 144.655 490.495 142.965 492.455 140.905 cv
cp
488.065 101.155 mo
487.145 100.905 486.195 100.715 485.225 100.585 cv
486.255 102.185 487.185 103.855 488.005 105.605 cv
493.285 105.605 li
491.715 103.755 489.945 102.235 488.065 101.155 cv
cp
482.675 105.605 mo
486.735 105.605 li
485.905 103.805 484.965 102.085 483.925 100.445 cv
483.515 100.405 483.095 100.385 482.675 100.375 cv
482.675 105.605 li
cp
482.675 106.795 mo
482.675 114.125 li
489.645 114.125 li
489.065 111.585 488.265 109.135 487.265 106.795 cv
482.675 106.795 li
cp
482.675 122.655 mo
490.685 122.655 li
490.635 120.145 490.375 117.695 489.905 115.325 cv
482.675 115.325 li
482.675 122.655 li
cp
486.865 140.905 mo
482.675 140.905 li
482.675 146.125 li
483.145 146.115 483.615 146.095 484.085 146.055 cv
485.115 144.425 486.045 142.705 486.865 140.905 cv
cp
482.675 131.185 mo
489.965 131.185 li
490.425 128.805 490.665 126.355 490.695 123.855 cv
482.675 123.855 li
482.675 131.185 li
cp
482.675 139.705 mo
487.395 139.705 li
488.375 137.375 489.155 134.925 489.715 132.375 cv
482.675 132.375 li
482.675 139.705 li
cp
481.475 100.375 mo
480.915 100.395 480.345 100.425 479.795 100.475 cv
478.765 102.105 477.825 103.815 477.005 105.605 cv
481.475 105.605 li
481.475 100.375 li
cp
481.475 140.905 mo
476.865 140.905 li
477.685 142.685 478.605 144.395 479.635 146.015 cv
480.235 146.075 480.855 146.115 481.475 146.125 cv
481.475 140.905 li
cp
481.475 106.795 mo
476.465 106.795 li
475.475 109.135 474.665 111.585 474.085 114.125 cv
481.475 114.125 li
481.475 106.795 li
cp
481.475 132.375 mo
474.015 132.375 li
474.575 134.925 475.365 137.375 476.345 139.705 cv
481.475 139.705 li
481.475 132.375 li
cp
481.475 115.325 mo
473.835 115.325 li
473.365 117.695 473.095 120.145 473.055 122.655 cv
481.475 122.655 li
481.475 115.325 li
cp
481.475 123.855 mo
473.045 123.855 li
473.065 126.355 473.315 128.805 473.765 131.185 cv
481.475 131.185 li
481.475 123.855 li
cp
478.165 145.775 mo
477.195 144.215 476.315 142.595 475.555 140.905 cv
471.545 140.905 li
473.455 142.915 475.695 144.575 478.165 145.775 cv
cp
470.715 105.605 mo
475.735 105.605 li
476.535 103.885 477.455 102.235 478.465 100.645 cv
477.555 100.795 476.665 100.995 475.795 101.245 cv
473.965 102.315 472.245 103.795 470.715 105.605 cv
cp
470.005 140.905 mo
467.505 140.905 li
469.495 142.555 471.765 143.865 474.245 144.765 cv
472.695 143.635 471.275 142.335 470.005 140.905 cv
cp
469.405 105.605 mo
470.325 104.485 471.335 103.455 472.425 102.495 cv
470.645 103.325 468.995 104.365 467.505 105.605 cv
469.405 105.605 li
cp
475.035 139.705 mo
474.055 137.365 473.285 134.915 472.745 132.375 cv
466.175 132.375 li
467.205 135.075 468.675 137.555 470.475 139.705 cv
475.035 139.705 li
cp
475.195 106.795 mo
469.765 106.795 li
468.165 108.935 466.835 111.425 465.905 114.125 cv
472.825 114.125 li
473.395 111.595 474.195 109.145 475.195 106.795 cv
cp
472.495 131.185 mo
472.055 128.805 471.825 126.355 471.795 123.855 cv
464.425 123.855 li
464.515 126.385 464.975 128.855 465.745 131.185 cv
472.495 131.185 li
cp
464.405 122.655 mo
471.805 122.655 li
471.855 120.155 472.115 117.705 472.575 115.325 cv
465.515 115.325 li
464.825 117.665 464.435 120.135 464.405 122.655 cv
cp
464.865 132.375 mo
461.085 132.375 li
462.285 135.155 464.025 137.635 466.175 139.705 cv
469.005 139.705 li
467.265 137.515 465.865 135.045 464.865 132.375 cv
cp
464.625 114.125 mo
465.535 111.475 466.835 109.005 468.465 106.795 cv
466.175 106.795 li
464.025 108.875 462.285 111.355 461.085 114.125 cv
464.625 114.125 li
cp
464.455 131.185 mo
463.715 128.855 463.265 126.405 463.185 123.855 cv
459.205 123.855 li
459.265 126.425 459.755 128.885 460.595 131.185 cv
464.455 131.185 li
cp
463.175 122.655 mo
463.195 120.115 463.565 117.655 464.235 115.325 cv
460.595 115.325 li
459.755 117.615 459.265 120.085 459.205 122.655 cv
463.175 122.655 li
cp
518.005 160.505 mo
527.355 160.505 li
527.355 159.755 li
518.005 159.755 li
518.005 160.505 li
cp
518.005 158.235 mo
527.355 158.235 li
527.355 157.485 li
518.005 157.485 li
518.005 158.235 li
cp
518.005 155.955 mo
527.355 155.955 li
527.355 155.205 li
518.005 155.205 li
518.005 155.955 li
cp
527.155 151.455 mo
527.155 150.815 526.635 150.295 525.995 150.295 cv
525.355 150.295 524.845 150.815 524.845 151.455 cv
524.845 152.095 525.355 152.615 525.995 152.615 cv
526.635 152.615 527.155 152.095 527.155 151.455 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
MQPSPM+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B64EDFED26B9E21A4F64848088903AC9891CF791BDBC4AB29A
CC8B3E8D13924A7DDE35F09AC5F4A8229C87124C732743268600EF8D4582208B
D16D82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MQPSPM+ArialMT /Encoding get
dup 65 /A put
pop
%ADOEndSubsetFont
/MQPSPM+ArialMT*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F 
2{/.notdef}rp /I 3{/.notdef}rp /M 2{/.notdef}rp /P /.notdef /R 
/S 17{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef 
/n 5{/.notdef}rp /t 139{/.notdef}rp]
MQPSPM+ArialMT nf
MQPSPM+ArialMT*1 [15.832 0 0 -15.832 0 0 ]msf
483.835 186.965 mo
(AS)
[10.5548 0 ]xsh
74.045 146.815 mo
186.155 146.815 li
@
116.105 155.215 mo
144.105 155.215 li
144.105 138.415 li
116.105 138.415 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
MQPSPM+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B7D8BE16D2C1CA7ED2E06F707C0E9530AE37D06FF7501A595D
3927> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MQPSPM+ArialMT /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/MQPSPM+ArialMT*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F 
2{/.notdef}rp /I 3{/.notdef}rp /M 2{/.notdef}rp /P /.notdef /R 
/S /T 16{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n 5{/.notdef}rp /t 139{/.notdef}rp]
MQPSPM+ArialMT nf
MQPSPM+ArialMT*1 [13.971 0 0 -13.971 0 0 ]msf
116.225 151.125 mo
(RTP)
[10.1569 8.6619 0 ]xsh
256.625 146.815 mo
331.555 146.815 li
331.555 79.985 li
@
286.275 155.215 mo
368.736 155.215 li
368.736 138.415 li
286.275 138.415 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
MQPSPM+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D0D18501A7E07A7DB7C8496D0849EBF5F0BA> |-
/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D
0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-
/v <1C60D8A8C9B7A73DB99D94C9412F55B03E92C174A4755E69F97C27D9162B
37724F74F272B140D258652D102C2EAC46833C73F9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MQPSPM+ArialMT /Encoding get
dup 47 /slash put
dup 50 /two put
dup 118 /v put
pop
%ADOEndSubsetFont
/MQPSPM+ArialMT*1 
[32{/.notdef}rp /space 14{/.notdef}rp /slash 2{/.notdef}rp /two 14{/.notdef}rp /A 
/.notdef /C 2{/.notdef}rp /F 2{/.notdef}rp /I 3{/.notdef}rp /M 
2{/.notdef}rp /P /.notdef /R /S /T 16{/.notdef}rp /e 
3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 5{/.notdef}rp /t 
/.notdef /v 137{/.notdef}rp]
MQPSPM+ArialMT nf
MQPSPM+ArialMT*1 [13.971 0 0 -13.971 0 0 ]msf
286.475 151.125 mo
(SIP)
[9.41656 3.77216 0 ]xsh
309.045 151.125 mo
(/)sh
312.925 151.125 mo
(MRCPv)
[11.6657 10.1569 10.1569 9.05331 0 ]xsh
361.185 151.125 mo
(2)sh
367.555 74.645 mo
429.775 74.645 li
429.775 73.345 430.835 72.285 432.135 72.285 cv
433.445 72.285 434.505 73.345 434.505 74.645 cv
494.225 74.645 li
494.225 102.725 li
@
426.655 83.045 mo
463.207 83.045 li
463.207 66.245 li
426.655 66.245 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
MQPSPM+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H <1C60D8A8C9B6079F62EE7568E8B09CBA01F57B4ACE6DA24AC6EA79287DF3
1270F7DC42D147A6FAB1DABB6C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MQPSPM+ArialMT /Encoding get
dup 72 /H put
pop
%ADOEndSubsetFont
/MQPSPM+ArialMT*1 
[32{/.notdef}rp /space 14{/.notdef}rp /slash 2{/.notdef}rp /two 14{/.notdef}rp /A 
/.notdef /C 2{/.notdef}rp /F /.notdef /H /I 3{/.notdef}rp 
/M 2{/.notdef}rp /P /.notdef /R /S /T 16{/.notdef}rp 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 5{/.notdef}rp 
/t /.notdef /v 137{/.notdef}rp]
MQPSPM+ArialMT nf
MQPSPM+ArialMT*1 [13.971 0 0 -13.971 0 0 ]msf
426.915 78.915 mo
(HTTP)
[10.1569 8.66193 8.29865 0 ]xsh
243.415 335.705 mo
267.535 335.705 li
@
253.485 321.475 mo
263.445 321.585 271.605 313.685 271.715 303.815 cv
271.825 293.955 263.845 285.875 253.885 285.765 cv
247.145 285.695 240.915 289.355 237.755 295.255 cv
238.965 295.215 240.185 295.305 241.375 295.525 cv
243.385 295.885 245.335 296.595 247.105 297.615 cv
248.875 298.625 250.465 299.955 251.775 301.515 cv
253.085 303.065 254.125 304.845 254.815 306.755 cv
255.515 308.655 255.875 310.685 255.875 312.705 cv
255.875 313.775 255.775 314.845 255.585 315.885 cv
255.385 316.935 255.095 317.965 254.705 318.965 cv
254.365 319.835 253.965 320.675 253.485 321.475 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
253.485 321.475 mo
263.445 321.585 271.605 313.685 271.715 303.815 cv
271.825 293.955 263.845 285.875 253.885 285.765 cv
247.145 285.695 240.915 289.355 237.755 295.255 cv
238.965 295.215 240.185 295.305 241.375 295.525 cv
243.385 295.885 245.335 296.595 247.105 297.615 cv
248.875 298.625 250.465 299.955 251.775 301.515 cv
253.085 303.065 254.125 304.845 254.815 306.755 cv
255.515 308.655 255.875 310.685 255.875 312.705 cv
255.875 313.775 255.775 314.845 255.585 315.885 cv
255.385 316.935 255.095 317.965 254.705 318.965 cv
254.365 319.835 253.965 320.675 253.485 321.475 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
268.635 339.065 mo
291.525 339.065 li
291.525 332.575 li
268.635 332.575 li
268.635 339.065 li
cp
291.585 333.795 mo
292.625 333.795 li
292.625 337.845 li
291.625 337.845 li
291.585 333.795 li
cp
268.645 337.845 mo
267.535 337.845 li
267.535 333.795 li
268.645 333.795 li
268.645 337.845 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
268.635 339.065 mo
291.525 339.065 li
291.525 332.575 li
268.635 332.575 li
268.635 339.065 li
cp
291.585 333.795 mo
292.625 333.795 li
292.625 337.845 li
291.625 337.845 li
268.645 337.845 mo
267.535 337.845 li
267.535 333.795 li
268.645 333.795 li
1 /0 /CSD get_res sepcs
1 sep
@
255.935 311.695 mo
255.935 311.695 li
@
255.935 311.695 mo
255.955 312.115 255.975 312.535 255.975 312.955 cv
255.975 315.435 255.475 317.785 254.565 319.925 cv
257.025 319.295 259.615 315.865 261.185 311.695 cv
255.935 311.695 li
cp
262.335 311.695 mo
260.995 315.485 258.815 318.845 256.365 320.325 cv
261.525 319.425 265.865 316.165 268.245 311.695 cv
262.335 311.695 li
cp
268.765 310.635 mo
269.625 308.705 270.125 306.595 270.195 304.375 cv
263.715 304.375 li
263.695 306.385 263.325 308.555 262.685 310.635 cv
268.765 310.635 li
cp
254.305 304.375 mo
254.305 305.425 li
255.065 307.045 255.585 308.795 255.825 310.635 cv
261.565 310.635 li
262.225 308.595 262.625 306.435 262.655 304.375 cv
254.305 304.375 li
cp
268.765 297.055 mo
262.385 297.055 li
263.095 299.045 263.585 301.185 263.695 303.305 cv
270.195 303.305 li
270.125 301.085 269.625 298.975 268.765 297.055 cv
cp
254.305 303.305 mo
262.635 303.305 li
262.515 301.125 261.995 299.005 261.255 297.055 cv
254.305 297.055 li
254.305 303.305 li
cp
253.125 303.305 mo
253.235 303.305 li
253.235 297.055 li
246.135 297.055 li
248.995 298.475 251.405 300.645 253.125 303.305 cv
cp
243.505 295.985 mo
245.225 295.985 li
246.635 291.385 249.525 288.355 251.665 287.205 cv
246.345 287.775 241.775 290.845 239.145 295.205 cv
240.655 295.285 242.115 295.555 243.505 295.985 cv
cp
253.235 287.765 mo
251.945 287.865 248.325 290.735 246.365 295.985 cv
253.235 295.985 li
253.235 287.765 li
cp
254.305 287.755 mo
254.305 295.985 li
260.825 295.985 li
258.765 291.215 255.545 287.765 254.305 287.755 cv
cp
261.965 295.985 mo
268.255 295.985 li
265.785 291.365 261.225 288.035 255.835 287.275 cv
257.785 288.585 260.305 291.925 261.965 295.985 cv
cp
271.495 335.805 mo
271.495 335.405 271.175 335.085 270.775 335.085 cv
270.375 335.085 270.055 335.405 270.055 335.805 cv
270.055 336.205 270.375 336.525 270.775 336.525 cv
271.175 336.525 271.495 336.205 271.495 335.805 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
255.935 311.695 mo
255.955 312.115 255.975 312.535 255.975 312.955 cv
255.975 315.435 255.475 317.785 254.565 319.925 cv
257.025 319.295 259.615 315.865 261.185 311.695 cv
255.935 311.695 li
262.335 311.695 mo
260.995 315.485 258.815 318.845 256.365 320.325 cv
261.525 319.425 265.865 316.165 268.245 311.695 cv
262.335 311.695 li
cp
268.765 310.635 mo
269.625 308.705 270.125 306.595 270.195 304.375 cv
263.715 304.375 li
263.695 306.385 263.325 308.555 262.685 310.635 cv
268.765 310.635 li
cp
254.305 304.375 mo
254.305 305.425 li
255.065 307.045 255.585 308.795 255.825 310.635 cv
261.565 310.635 li
262.225 308.595 262.625 306.435 262.655 304.375 cv
254.305 304.375 li
268.765 297.055 mo
262.385 297.055 li
263.095 299.045 263.585 301.185 263.695 303.305 cv
270.195 303.305 li
270.125 301.085 269.625 298.975 268.765 297.055 cv
cp
254.305 303.305 mo
262.635 303.305 li
262.515 301.125 261.995 299.005 261.255 297.055 cv
254.305 297.055 li
254.305 303.305 li
cp
253.125 303.305 mo
253.235 303.305 li
253.235 297.055 li
246.135 297.055 li
248.995 298.475 251.405 300.645 253.125 303.305 cv
cp
243.505 295.985 mo
245.225 295.985 li
246.635 291.385 249.525 288.355 251.665 287.205 cv
246.345 287.775 241.775 290.845 239.145 295.205 cv
240.655 295.285 242.115 295.555 243.505 295.985 cv
cp
253.235 287.765 mo
251.945 287.865 248.325 290.735 246.365 295.985 cv
253.235 295.985 li
253.235 287.765 li
cp
254.305 287.755 mo
254.305 295.985 li
260.825 295.985 li
258.765 291.215 255.545 287.765 254.305 287.755 cv
cp
261.965 295.985 mo
268.255 295.985 li
265.785 291.365 261.225 288.035 255.835 287.275 cv
257.785 288.585 260.305 291.925 261.965 295.985 cv
cp
271.495 335.805 mo
271.495 335.405 271.175 335.085 270.775 335.085 cv
270.375 335.085 270.055 335.405 270.055 335.805 cv
270.055 336.205 270.375 336.525 270.775 336.525 cv
271.175 336.525 271.495 336.205 271.495 335.805 cv
cp
284.905 335.125 mo
290.125 335.125 li
284.905 336.485 mo
290.125 336.485 li
1 /0 /CSD get_res sepcs
1 sep
@
220.625 313.695 mo
220.675 314.575 220.795 315.445 220.975 316.315 cv
221.745 316.105 li
221.575 315.315 221.465 314.505 221.415 313.695 cv
220.625 313.695 li
cp
255.845 311.725 mo
255.795 310.845 255.685 309.965 255.495 309.105 cv
254.735 309.305 li
254.905 310.105 255.015 310.915 255.055 311.725 cv
255.845 311.725 li
cp
234.675 329.795 mo
235.525 329.965 236.385 330.075 237.255 330.125 cv
237.255 329.335 li
236.855 329.315 236.455 329.275 236.065 329.225 cv
235.665 329.175 235.275 329.105 234.885 329.025 cv
234.675 329.795 li
cp
241.795 295.625 mo
240.945 295.455 240.085 295.345 239.225 295.295 cv
239.225 296.085 li
239.795 296.115 240.365 296.175 240.935 296.265 cv
241.155 296.305 241.375 296.345 241.595 296.385 cv
241.795 295.625 li
cp
241.595 329.025 mo
240.805 329.185 240.015 329.285 239.225 329.335 cv
239.225 330.125 li
240.085 330.075 240.945 329.965 241.795 329.795 cv
241.595 329.025 li
cp
234.885 296.385 mo
234.925 296.375 234.975 296.365 235.015 296.355 cv
235.755 296.215 236.505 296.125 237.255 296.085 cv
237.255 295.295 li
236.385 295.345 235.525 295.455 234.675 295.625 cv
234.885 296.385 li
cp
245.715 327.635 mo
244.995 327.985 244.255 328.285 243.495 328.525 cv
243.705 329.295 li
244.525 329.025 245.335 328.695 246.115 328.315 cv
245.715 327.635 li
cp
230.755 297.785 mo
231.475 297.435 232.215 297.135 232.975 296.885 cv
232.775 296.125 li
231.945 296.385 231.145 296.715 230.365 297.095 cv
230.755 297.785 li
cp
223.215 320.245 mo
222.995 319.825 222.795 319.385 222.615 318.945 cv
222.485 318.635 222.365 318.325 222.265 318.005 cv
221.495 318.215 li
221.775 319.045 222.125 319.855 222.525 320.645 cv
223.215 320.245 li
cp
253.265 305.165 mo
253.565 305.755 253.825 306.345 254.055 306.955 cv
254.105 307.105 254.165 307.255 254.215 307.405 cv
254.975 307.205 li
254.695 306.365 254.355 305.555 253.945 304.775 cv
253.265 305.165 li
cp
249.355 325.225 mo
248.755 325.745 248.105 326.225 247.435 326.665 cv
247.825 327.345 li
248.565 326.875 249.255 326.355 249.915 325.775 cv
249.355 325.225 li
cp
227.115 300.195 mo
227.725 299.665 228.365 299.185 229.045 298.755 cv
228.645 298.065 li
227.915 298.535 227.215 299.065 226.555 299.635 cv
227.115 300.195 li
cp
225.705 323.845 mo
225.165 323.245 224.665 322.615 224.215 321.945 cv
223.525 322.335 li
224.015 323.065 224.555 323.755 225.145 324.405 cv
225.705 323.845 li
cp
250.765 301.575 mo
250.875 301.685 250.975 301.805 251.075 301.915 cv
251.495 302.415 251.895 302.935 252.265 303.475 cv
252.945 303.075 li
252.455 302.355 251.915 301.665 251.325 301.015 cv
250.765 301.575 li
cp
252.265 321.945 mo
252.095 322.195 251.915 322.435 251.735 322.685 cv
251.425 323.085 251.105 323.475 250.765 323.845 cv
251.325 324.405 li
251.915 323.755 252.455 323.065 252.945 322.335 cv
252.265 321.945 li
cp
224.215 303.475 mo
224.475 303.075 224.765 302.695 225.065 302.325 cv
225.275 302.065 225.485 301.815 225.705 301.575 cv
225.145 301.015 li
224.555 301.665 224.015 302.355 223.525 303.075 cv
224.215 303.475 li
cp
229.045 326.665 mo
228.365 326.225 227.725 325.745 227.115 325.225 cv
226.555 325.775 li
227.215 326.355 227.915 326.875 228.645 327.345 cv
229.045 326.665 li
cp
247.435 298.755 mo
248.105 299.185 248.755 299.665 249.355 300.195 cv
249.915 299.635 li
249.255 299.065 248.565 298.535 247.825 298.065 cv
247.435 298.755 li
cp
254.215 318.005 mo
253.955 318.775 253.635 319.525 253.265 320.245 cv
253.945 320.645 li
254.355 319.855 254.695 319.045 254.975 318.215 cv
254.215 318.005 li
cp
222.265 307.405 mo
222.525 306.635 222.835 305.895 223.215 305.165 cv
222.525 304.775 li
222.125 305.555 221.775 306.365 221.495 307.205 cv
222.265 307.405 li
cp
232.975 328.525 mo
232.215 328.285 231.475 327.985 230.755 327.635 cv
230.365 328.315 li
231.145 328.695 231.945 329.025 232.775 329.295 cv
232.975 328.525 li
cp
243.495 296.885 mo
244.255 297.135 244.995 297.435 245.715 297.785 cv
246.115 297.095 li
245.335 296.715 244.525 296.385 243.705 296.125 cv
243.495 296.885 li
cp
221.415 311.725 mo
221.465 310.915 221.575 310.105 221.745 309.305 cv
220.975 309.105 li
220.795 309.965 220.675 310.845 220.625 311.725 cv
221.415 311.725 li
cp
255.055 313.695 mo
255.015 314.505 254.905 315.315 254.735 316.105 cv
255.495 316.315 li
255.685 315.445 255.795 314.575 255.845 313.695 cv
255.055 313.695 li
cp
247.055 324.075 mo
244.375 324.075 li
243.915 324.975 li
246.235 324.985 li
247.055 324.075 li
cp
229.625 324.075 mo
230.275 324.985 li
232.205 324.975 li
231.815 324.095 li
229.625 324.075 li
cp
236.515 324.935 mo
236.515 324.025 li
234.575 324.025 li
234.925 324.855 li
236.515 324.935 li
cp
241.255 324.935 mo
241.765 324.025 li
239.875 324.025 li
239.875 324.975 li
241.255 324.935 li
cp
247.055 300.985 mo
246.235 300.085 li
243.915 300.095 li
244.375 300.985 li
247.055 300.985 li
cp
229.625 300.985 mo
231.815 300.975 li
232.205 300.095 li
230.275 300.085 li
229.625 300.985 li
cp
236.515 300.135 mo
234.925 300.215 li
234.575 301.035 li
236.515 301.035 li
236.515 300.135 li
cp
241.255 300.135 mo
239.875 300.095 li
239.875 301.035 li
241.765 301.035 li
241.255 300.135 li
cp
253.195 313.165 mo
254.305 313.165 li
254.305 312.255 li
253.195 312.255 li
253.195 313.165 li
cp
252.745 305.645 mo
251.775 305.645 li
252.055 306.545 li
253.055 306.545 li
252.745 305.645 li
cp
251.655 314.515 mo
252.565 314.515 li
252.635 313.865 252.635 313.395 252.635 312.725 cv
252.635 312.005 252.625 311.525 252.555 310.825 cv
251.635 310.825 li
251.715 311.525 251.725 312.005 251.725 312.725 cv
251.725 313.395 251.725 313.855 251.655 314.515 cv
cp
252.105 308.035 mo
251.755 306.545 251.385 305.625 250.725 304.285 cv
249.775 304.285 li
250.435 305.615 250.805 306.545 251.175 308.035 cv
252.105 308.035 li
cp
250.645 313.165 mo
250.645 312.255 li
247.045 312.255 li
247.055 313.165 li
250.645 313.165 li
cp
247.255 298.845 mo
246.405 298.975 li
247.365 299.965 247.945 300.835 248.695 302.115 cv
249.645 302.115 li
248.905 300.885 248.225 299.895 247.255 298.845 cv
cp
249.465 305.645 mo
246.035 305.645 li
246.305 306.545 li
249.775 306.545 li
249.465 305.645 li
cp
244.825 314.515 mo
245.745 314.515 li
245.785 313.845 245.775 313.365 245.775 312.675 cv
245.775 311.975 245.785 311.495 245.745 310.805 cv
244.825 310.805 li
244.875 311.495 244.865 311.975 244.865 312.675 cv
244.865 313.365 244.875 313.845 244.825 314.515 cv
cp
245.445 308.035 mo
245.235 306.585 245.045 305.665 244.635 304.285 cv
243.715 304.285 li
244.115 305.665 244.305 306.585 244.525 308.035 cv
245.445 308.035 li
cp
251.925 319.675 mo
252.665 319.675 li
252.835 318.765 li
252.235 318.765 li
251.925 319.675 li
cp
250.855 320.915 mo
251.455 319.645 251.745 318.665 252.065 317.265 cv
251.135 317.265 li
250.805 318.665 250.495 319.645 249.885 320.915 cv
250.855 320.915 li
cp
249.065 322.915 mo
248.255 324.195 247.725 325.075 246.655 326.095 cv
247.815 326.095 li
248.835 325.045 249.315 324.165 250.075 322.915 cv
249.065 322.915 li
cp
249.465 319.675 mo
249.775 318.765 li
246.275 318.765 li
246.095 319.675 li
249.465 319.675 li
cp
244.655 320.955 mo
245.025 319.655 245.285 318.635 245.475 317.265 cv
244.555 317.265 li
244.345 318.635 244.085 319.655 243.715 320.955 cv
244.655 320.955 li
cp
243.125 326.095 mo
243.695 324.935 243.765 324.155 244.185 322.915 cv
243.235 322.915 li
242.805 324.155 242.725 324.945 242.165 326.095 cv
243.125 326.095 li
cp
243.915 302.115 mo
243.455 300.825 243.165 300.095 242.535 298.895 cv
241.615 298.895 li
242.235 300.095 242.525 300.825 242.985 302.115 cv
243.915 302.115 li
cp
243.105 305.645 mo
239.875 305.645 li
239.875 306.545 li
243.365 306.545 li
243.105 305.645 li
cp
239.875 313.165 mo
243.465 313.165 li
243.465 312.255 li
239.875 312.255 li
239.875 313.165 li
cp
243.245 319.675 mo
243.465 318.765 li
239.875 318.765 li
239.875 319.675 li
243.245 319.675 li
cp
237.785 297.165 mo
238.695 297.165 li
238.695 295.295 li
237.785 295.295 li
237.785 297.165 li
cp
237.785 302.115 mo
238.695 302.115 li
238.695 298.895 li
237.785 298.895 li
237.785 302.115 li
cp
237.785 308.075 mo
238.695 308.075 li
238.695 304.375 li
237.785 304.375 li
237.785 308.075 li
cp
237.785 314.515 mo
238.695 314.515 li
238.695 310.825 li
237.785 310.825 li
237.785 314.515 li
cp
237.785 320.955 mo
238.695 320.955 li
238.695 317.265 li
237.785 317.265 li
237.785 320.955 li
cp
237.785 326.095 mo
238.695 326.095 li
238.695 322.915 li
237.785 322.915 li
237.785 326.095 li
cp
237.785 328.235 mo
237.785 330.105 li
238.695 330.105 li
238.695 328.235 li
237.785 328.235 li
cp
232.825 318.765 mo
233.155 319.675 li
236.515 319.675 li
236.515 318.765 li
232.825 318.765 li
cp
232.645 306.545 mo
236.515 306.545 li
236.515 305.645 li
232.825 305.645 li
232.645 306.545 li
cp
232.555 313.165 mo
236.515 313.165 li
236.515 312.255 li
232.555 312.255 li
232.555 313.165 li
cp
233.135 302.115 mo
233.605 300.825 233.785 300.095 234.405 298.895 cv
233.485 298.895 li
232.855 300.095 232.675 300.825 232.205 302.115 cv
233.135 302.115 li
cp
234.345 326.095 mo
233.775 324.945 233.465 324.155 233.035 322.915 cv
232.075 322.915 li
232.505 324.155 232.815 324.935 233.385 326.095 cv
234.345 326.095 li
cp
231.335 320.955 mo
232.275 320.955 li
231.905 319.655 231.795 318.635 231.595 317.265 cv
230.665 317.265 li
230.865 318.635 230.965 319.655 231.335 320.955 cv
cp
230.665 308.035 mo
231.585 308.035 li
231.805 306.585 231.995 305.665 232.405 304.285 cv
231.475 304.285 li
231.065 305.665 230.885 306.585 230.665 308.035 cv
cp
231.295 314.515 mo
231.255 313.845 231.255 313.365 231.255 312.675 cv
231.255 311.975 231.245 311.495 231.295 310.805 cv
230.385 310.805 li
230.335 311.495 230.345 311.975 230.345 312.675 cv
230.345 313.365 230.335 313.845 230.385 314.515 cv
231.295 314.515 li
cp
227.405 305.645 mo
227.045 306.545 li
229.865 306.545 li
230.205 305.645 li
227.405 305.645 li
cp
229.535 298.855 mo
228.565 299.895 227.695 300.885 226.965 302.115 cv
227.905 302.115 li
228.665 300.835 229.545 299.845 230.505 298.855 cv
229.535 298.855 li
cp
227.285 319.675 mo
230.145 319.675 li
229.835 318.765 li
226.945 318.765 li
227.285 319.675 li
cp
229.965 326.095 mo
228.965 325.085 228.365 324.115 227.615 322.875 cv
226.615 322.875 li
227.325 324.105 227.875 325.065 228.825 326.095 cv
229.965 326.095 li
cp
225.965 313.165 mo
229.265 313.165 li
229.265 312.255 li
225.965 312.255 li
225.965 313.165 li
cp
224.765 308.035 mo
225.695 308.035 li
226.055 306.545 226.275 305.615 226.935 304.285 cv
225.985 304.285 li
225.325 305.625 225.115 306.545 224.765 308.035 cv
cp
225.965 320.955 mo
226.935 320.955 li
226.325 319.695 226.015 318.665 225.685 317.265 cv
224.755 317.265 li
225.075 318.665 225.365 319.685 225.965 320.955 cv
cp
223.585 319.675 mo
224.805 319.675 li
224.495 318.765 li
223.245 318.765 li
223.585 319.675 li
cp
223.435 305.645 mo
223.075 306.545 li
224.255 306.545 li
224.595 305.645 li
223.435 305.645 li
cp
222.135 313.165 mo
223.245 313.165 li
223.245 312.255 li
222.135 312.255 li
222.135 313.165 li
cp
225.145 314.515 mo
225.075 313.855 225.095 313.395 225.095 312.725 cv
225.095 312.005 225.135 311.525 225.215 310.825 cv
224.305 310.825 li
224.225 311.525 224.195 312.005 224.195 312.725 cv
224.195 313.395 224.165 313.865 224.235 314.515 cv
225.145 314.515 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
220.625 313.695 mo
220.675 314.575 220.795 315.445 220.975 316.315 cv
221.745 316.105 li
221.575 315.315 221.465 314.505 221.415 313.695 cv
220.625 313.695 li
cp
255.845 311.725 mo
255.795 310.845 255.685 309.965 255.495 309.105 cv
254.735 309.305 li
254.905 310.105 255.015 310.915 255.055 311.725 cv
255.845 311.725 li
cp
234.675 329.795 mo
235.525 329.965 236.385 330.075 237.255 330.125 cv
237.255 329.335 li
236.855 329.315 236.455 329.275 236.065 329.225 cv
235.665 329.175 235.275 329.105 234.885 329.025 cv
234.675 329.795 li
cp
241.795 295.625 mo
240.945 295.455 240.085 295.345 239.225 295.295 cv
239.225 296.085 li
239.795 296.115 240.365 296.175 240.935 296.265 cv
241.155 296.305 241.375 296.345 241.595 296.385 cv
241.795 295.625 li
cp
241.595 329.025 mo
240.805 329.185 240.015 329.285 239.225 329.335 cv
239.225 330.125 li
240.085 330.075 240.945 329.965 241.795 329.795 cv
241.595 329.025 li
cp
234.885 296.385 mo
234.925 296.375 234.975 296.365 235.015 296.355 cv
235.755 296.215 236.505 296.125 237.255 296.085 cv
237.255 295.295 li
236.385 295.345 235.525 295.455 234.675 295.625 cv
234.885 296.385 li
cp
245.715 327.635 mo
244.995 327.985 244.255 328.285 243.495 328.525 cv
243.705 329.295 li
244.525 329.025 245.335 328.695 246.115 328.315 cv
245.715 327.635 li
cp
230.755 297.785 mo
231.475 297.435 232.215 297.135 232.975 296.885 cv
232.775 296.125 li
231.945 296.385 231.145 296.715 230.365 297.095 cv
230.755 297.785 li
cp
223.215 320.245 mo
222.995 319.825 222.795 319.385 222.615 318.945 cv
222.485 318.635 222.365 318.325 222.265 318.005 cv
221.495 318.215 li
221.775 319.045 222.125 319.855 222.525 320.645 cv
223.215 320.245 li
cp
253.265 305.165 mo
253.565 305.755 253.825 306.345 254.055 306.955 cv
254.105 307.105 254.165 307.255 254.215 307.405 cv
254.975 307.205 li
254.695 306.365 254.355 305.555 253.945 304.775 cv
253.265 305.165 li
cp
249.355 325.225 mo
248.755 325.745 248.105 326.225 247.435 326.665 cv
247.825 327.345 li
248.565 326.875 249.255 326.355 249.915 325.775 cv
249.355 325.225 li
cp
227.115 300.195 mo
227.725 299.665 228.365 299.185 229.045 298.755 cv
228.645 298.065 li
227.915 298.535 227.215 299.065 226.555 299.635 cv
227.115 300.195 li
cp
225.705 323.845 mo
225.165 323.245 224.665 322.615 224.215 321.945 cv
223.525 322.335 li
224.015 323.065 224.555 323.755 225.145 324.405 cv
225.705 323.845 li
cp
250.765 301.575 mo
250.875 301.685 250.975 301.805 251.075 301.915 cv
251.495 302.415 251.895 302.935 252.265 303.475 cv
252.945 303.075 li
252.455 302.355 251.915 301.665 251.325 301.015 cv
250.765 301.575 li
cp
252.265 321.945 mo
252.095 322.195 251.915 322.435 251.735 322.685 cv
251.425 323.085 251.105 323.475 250.765 323.845 cv
251.325 324.405 li
251.915 323.755 252.455 323.065 252.945 322.335 cv
252.265 321.945 li
cp
224.215 303.475 mo
224.475 303.075 224.765 302.695 225.065 302.325 cv
225.275 302.065 225.485 301.815 225.705 301.575 cv
225.145 301.015 li
224.555 301.665 224.015 302.355 223.525 303.075 cv
224.215 303.475 li
cp
229.045 326.665 mo
228.365 326.225 227.725 325.745 227.115 325.225 cv
226.555 325.775 li
227.215 326.355 227.915 326.875 228.645 327.345 cv
229.045 326.665 li
cp
247.435 298.755 mo
248.105 299.185 248.755 299.665 249.355 300.195 cv
249.915 299.635 li
249.255 299.065 248.565 298.535 247.825 298.065 cv
247.435 298.755 li
cp
254.215 318.005 mo
253.955 318.775 253.635 319.525 253.265 320.245 cv
253.945 320.645 li
254.355 319.855 254.695 319.045 254.975 318.215 cv
254.215 318.005 li
cp
222.265 307.405 mo
222.525 306.635 222.835 305.895 223.215 305.165 cv
222.525 304.775 li
222.125 305.555 221.775 306.365 221.495 307.205 cv
222.265 307.405 li
cp
232.975 328.525 mo
232.215 328.285 231.475 327.985 230.755 327.635 cv
230.365 328.315 li
231.145 328.695 231.945 329.025 232.775 329.295 cv
232.975 328.525 li
cp
243.495 296.885 mo
244.255 297.135 244.995 297.435 245.715 297.785 cv
246.115 297.095 li
245.335 296.715 244.525 296.385 243.705 296.125 cv
243.495 296.885 li
cp
221.415 311.725 mo
221.465 310.915 221.575 310.105 221.745 309.305 cv
220.975 309.105 li
220.795 309.965 220.675 310.845 220.625 311.725 cv
221.415 311.725 li
cp
255.055 313.695 mo
255.015 314.505 254.905 315.315 254.735 316.105 cv
255.495 316.315 li
255.685 315.445 255.795 314.575 255.845 313.695 cv
255.055 313.695 li
cp
247.055 324.075 mo
244.375 324.075 li
243.915 324.975 li
246.235 324.985 li
247.055 324.075 li
cp
229.625 324.075 mo
230.275 324.985 li
232.205 324.975 li
231.815 324.095 li
229.625 324.075 li
cp
236.515 324.935 mo
236.515 324.025 li
234.575 324.025 li
234.925 324.855 li
236.515 324.935 li
cp
241.255 324.935 mo
241.765 324.025 li
239.875 324.025 li
239.875 324.975 li
241.255 324.935 li
cp
247.055 300.985 mo
246.235 300.085 li
243.915 300.095 li
244.375 300.985 li
247.055 300.985 li
cp
229.625 300.985 mo
231.815 300.975 li
232.205 300.095 li
230.275 300.085 li
229.625 300.985 li
cp
236.515 300.135 mo
234.925 300.215 li
234.575 301.035 li
236.515 301.035 li
236.515 300.135 li
cp
241.255 300.135 mo
239.875 300.095 li
239.875 301.035 li
241.765 301.035 li
241.255 300.135 li
cp
253.195 313.165 mo
254.305 313.165 li
254.305 312.255 li
253.195 312.255 li
253.195 313.165 li
cp
252.745 305.645 mo
251.775 305.645 li
252.055 306.545 li
253.055 306.545 li
252.745 305.645 li
cp
251.655 314.515 mo
252.565 314.515 li
252.635 313.865 252.635 313.395 252.635 312.725 cv
252.635 312.005 252.625 311.525 252.555 310.825 cv
251.635 310.825 li
251.715 311.525 251.725 312.005 251.725 312.725 cv
251.725 313.395 251.725 313.855 251.655 314.515 cv
cp
252.105 308.035 mo
251.755 306.545 251.385 305.625 250.725 304.285 cv
249.775 304.285 li
250.435 305.615 250.805 306.545 251.175 308.035 cv
252.105 308.035 li
cp
250.645 313.165 mo
250.645 312.255 li
247.045 312.255 li
247.055 313.165 li
250.645 313.165 li
cp
247.255 298.845 mo
246.405 298.975 li
247.365 299.965 247.945 300.835 248.695 302.115 cv
249.645 302.115 li
248.905 300.885 248.225 299.895 247.255 298.845 cv
cp
249.465 305.645 mo
246.035 305.645 li
246.305 306.545 li
249.775 306.545 li
249.465 305.645 li
cp
244.825 314.515 mo
245.745 314.515 li
245.785 313.845 245.775 313.365 245.775 312.675 cv
245.775 311.975 245.785 311.495 245.745 310.805 cv
244.825 310.805 li
244.875 311.495 244.865 311.975 244.865 312.675 cv
244.865 313.365 244.875 313.845 244.825 314.515 cv
cp
245.445 308.035 mo
245.235 306.585 245.045 305.665 244.635 304.285 cv
243.715 304.285 li
244.115 305.665 244.305 306.585 244.525 308.035 cv
245.445 308.035 li
cp
251.925 319.675 mo
252.665 319.675 li
252.835 318.765 li
252.235 318.765 li
251.925 319.675 li
cp
250.855 320.915 mo
251.455 319.645 251.745 318.665 252.065 317.265 cv
251.135 317.265 li
250.805 318.665 250.495 319.645 249.885 320.915 cv
250.855 320.915 li
cp
249.065 322.915 mo
248.255 324.195 247.725 325.075 246.655 326.095 cv
247.815 326.095 li
248.835 325.045 249.315 324.165 250.075 322.915 cv
249.065 322.915 li
cp
249.465 319.675 mo
249.775 318.765 li
246.275 318.765 li
246.095 319.675 li
249.465 319.675 li
cp
244.655 320.955 mo
245.025 319.655 245.285 318.635 245.475 317.265 cv
244.555 317.265 li
244.345 318.635 244.085 319.655 243.715 320.955 cv
244.655 320.955 li
cp
243.125 326.095 mo
243.695 324.935 243.765 324.155 244.185 322.915 cv
243.235 322.915 li
242.805 324.155 242.725 324.945 242.165 326.095 cv
243.125 326.095 li
cp
243.915 302.115 mo
243.455 300.825 243.165 300.095 242.535 298.895 cv
241.615 298.895 li
242.235 300.095 242.525 300.825 242.985 302.115 cv
243.915 302.115 li
cp
243.105 305.645 mo
239.875 305.645 li
239.875 306.545 li
243.365 306.545 li
243.105 305.645 li
cp
239.875 313.165 mo
243.465 313.165 li
243.465 312.255 li
239.875 312.255 li
239.875 313.165 li
cp
243.245 319.675 mo
243.465 318.765 li
239.875 318.765 li
239.875 319.675 li
243.245 319.675 li
cp
237.785 297.165 mo
238.695 297.165 li
238.695 295.295 li
237.785 295.295 li
237.785 297.165 li
cp
237.785 302.115 mo
238.695 302.115 li
238.695 298.895 li
237.785 298.895 li
237.785 302.115 li
cp
237.785 308.075 mo
238.695 308.075 li
238.695 304.375 li
237.785 304.375 li
237.785 308.075 li
cp
237.785 314.515 mo
238.695 314.515 li
238.695 310.825 li
237.785 310.825 li
237.785 314.515 li
cp
237.785 320.955 mo
238.695 320.955 li
238.695 317.265 li
237.785 317.265 li
237.785 320.955 li
cp
237.785 326.095 mo
238.695 326.095 li
238.695 322.915 li
237.785 322.915 li
237.785 326.095 li
cp
237.785 328.235 mo
237.785 330.105 li
238.695 330.105 li
238.695 328.235 li
237.785 328.235 li
cp
232.825 318.765 mo
233.155 319.675 li
236.515 319.675 li
236.515 318.765 li
232.825 318.765 li
cp
232.645 306.545 mo
236.515 306.545 li
236.515 305.645 li
232.825 305.645 li
232.645 306.545 li
cp
232.555 313.165 mo
236.515 313.165 li
236.515 312.255 li
232.555 312.255 li
232.555 313.165 li
cp
233.135 302.115 mo
233.605 300.825 233.785 300.095 234.405 298.895 cv
233.485 298.895 li
232.855 300.095 232.675 300.825 232.205 302.115 cv
233.135 302.115 li
cp
234.345 326.095 mo
233.775 324.945 233.465 324.155 233.035 322.915 cv
232.075 322.915 li
232.505 324.155 232.815 324.935 233.385 326.095 cv
234.345 326.095 li
cp
231.335 320.955 mo
232.275 320.955 li
231.905 319.655 231.795 318.635 231.595 317.265 cv
230.665 317.265 li
230.865 318.635 230.965 319.655 231.335 320.955 cv
cp
230.665 308.035 mo
231.585 308.035 li
231.805 306.585 231.995 305.665 232.405 304.285 cv
231.475 304.285 li
231.065 305.665 230.885 306.585 230.665 308.035 cv
cp
231.295 314.515 mo
231.255 313.845 231.255 313.365 231.255 312.675 cv
231.255 311.975 231.245 311.495 231.295 310.805 cv
230.385 310.805 li
230.335 311.495 230.345 311.975 230.345 312.675 cv
230.345 313.365 230.335 313.845 230.385 314.515 cv
231.295 314.515 li
cp
227.405 305.645 mo
227.045 306.545 li
229.865 306.545 li
230.205 305.645 li
227.405 305.645 li
cp
229.535 298.855 mo
228.565 299.895 227.695 300.885 226.965 302.115 cv
227.905 302.115 li
228.665 300.835 229.545 299.845 230.505 298.855 cv
229.535 298.855 li
cp
227.285 319.675 mo
230.145 319.675 li
229.835 318.765 li
226.945 318.765 li
227.285 319.675 li
cp
229.965 326.095 mo
228.965 325.085 228.365 324.115 227.615 322.875 cv
226.615 322.875 li
227.325 324.105 227.875 325.065 228.825 326.095 cv
229.965 326.095 li
cp
225.965 313.165 mo
229.265 313.165 li
229.265 312.255 li
225.965 312.255 li
225.965 313.165 li
cp
224.765 308.035 mo
225.695 308.035 li
226.055 306.545 226.275 305.615 226.935 304.285 cv
225.985 304.285 li
225.325 305.625 225.115 306.545 224.765 308.035 cv
cp
225.965 320.955 mo
226.935 320.955 li
226.325 319.695 226.015 318.665 225.685 317.265 cv
224.755 317.265 li
225.075 318.665 225.365 319.685 225.965 320.955 cv
cp
223.585 319.675 mo
224.805 319.675 li
224.495 318.765 li
223.245 318.765 li
223.585 319.675 li
cp
223.435 305.645 mo
223.075 306.545 li
224.255 306.545 li
224.595 305.645 li
223.435 305.645 li
cp
222.135 313.165 mo
223.245 313.165 li
223.245 312.255 li
222.135 312.255 li
222.135 313.165 li
cp
225.145 314.515 mo
225.075 313.855 225.095 313.395 225.095 312.725 cv
225.095 312.005 225.135 311.525 225.215 310.825 cv
224.305 310.825 li
224.225 311.525 224.195 312.005 224.195 312.725 cv
224.195 313.395 224.165 313.865 224.235 314.515 cv
225.145 314.515 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
MQPSPM+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C3A78A5675B101A923F2D2A8AB56C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
MQPSPM+ArialMT /Encoding get
dup 45 /hyphen put
pop
%ADOEndSubsetFont
/MQPSPM+ArialMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash 2{/.notdef}rp /two 
14{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F /.notdef /H 
/I 3{/.notdef}rp /M 2{/.notdef}rp /P /.notdef /R /S 
/T 16{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef 
/n 5{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]
MQPSPM+ArialMT nf
MQPSPM+ArialMT*1 [15.856 0 0 -15.856 0 0 ]msf
227.005 367.055 mo
(P)sh
237.675 367.055 mo
(-)sh
243.025 367.055 mo
(CSCF)
[11.67 10.5761 11.6541 0 ]xsh
430.615 335.705 mo
454.735 335.705 li
@
440.685 321.475 mo
450.645 321.585 458.805 313.685 458.915 303.815 cv
459.025 293.955 451.045 285.875 441.085 285.765 cv
434.345 285.695 428.115 289.355 424.955 295.255 cv
426.165 295.215 427.385 295.305 428.575 295.525 cv
430.585 295.885 432.535 296.595 434.305 297.615 cv
436.075 298.625 437.665 299.955 438.975 301.515 cv
440.285 303.065 441.325 304.845 442.015 306.755 cv
442.715 308.655 443.075 310.685 443.075 312.705 cv
443.075 313.775 442.975 314.845 442.785 315.885 cv
442.585 316.935 442.295 317.965 441.905 318.965 cv
441.565 319.835 441.165 320.675 440.685 321.475 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
440.685 321.475 mo
450.645 321.585 458.805 313.685 458.915 303.815 cv
459.025 293.955 451.045 285.875 441.085 285.765 cv
434.345 285.695 428.115 289.355 424.955 295.255 cv
426.165 295.215 427.385 295.305 428.575 295.525 cv
430.585 295.885 432.535 296.595 434.305 297.615 cv
436.075 298.625 437.665 299.955 438.975 301.515 cv
440.285 303.065 441.325 304.845 442.015 306.755 cv
442.715 308.655 443.075 310.685 443.075 312.705 cv
443.075 313.775 442.975 314.845 442.785 315.885 cv
442.585 316.935 442.295 317.965 441.905 318.965 cv
441.565 319.835 441.165 320.675 440.685 321.475 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
455.835 339.065 mo
478.725 339.065 li
478.725 332.575 li
455.835 332.575 li
455.835 339.065 li
cp
478.785 333.795 mo
479.825 333.795 li
479.825 337.845 li
478.825 337.845 li
478.785 333.795 li
cp
455.845 337.845 mo
454.735 337.845 li
454.735 333.795 li
455.845 333.795 li
455.845 337.845 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
455.835 339.065 mo
478.725 339.065 li
478.725 332.575 li
455.835 332.575 li
455.835 339.065 li
cp
478.785 333.795 mo
479.825 333.795 li
479.825 337.845 li
478.825 337.845 li
455.845 337.845 mo
454.735 337.845 li
454.735 333.795 li
455.845 333.795 li
1 /0 /CSD get_res sepcs
1 sep
@
443.135 311.695 mo
443.135 311.695 li
@
443.135 311.695 mo
443.155 312.115 443.175 312.535 443.175 312.955 cv
443.175 315.435 442.675 317.785 441.765 319.925 cv
444.225 319.295 446.815 315.865 448.385 311.695 cv
443.135 311.695 li
cp
449.535 311.695 mo
448.195 315.485 446.015 318.845 443.565 320.325 cv
448.725 319.425 453.065 316.165 455.445 311.695 cv
449.535 311.695 li
cp
455.965 310.635 mo
456.825 308.705 457.325 306.595 457.395 304.375 cv
450.915 304.375 li
450.895 306.385 450.525 308.555 449.885 310.635 cv
455.965 310.635 li
cp
441.505 304.375 mo
441.505 305.425 li
442.265 307.045 442.785 308.795 443.025 310.635 cv
448.765 310.635 li
449.425 308.595 449.825 306.435 449.855 304.375 cv
441.505 304.375 li
cp
455.965 297.055 mo
449.585 297.055 li
450.295 299.045 450.785 301.185 450.895 303.305 cv
457.395 303.305 li
457.325 301.085 456.825 298.975 455.965 297.055 cv
cp
441.505 303.305 mo
449.835 303.305 li
449.715 301.125 449.195 299.005 448.455 297.055 cv
441.505 297.055 li
441.505 303.305 li
cp
440.325 303.305 mo
440.435 303.305 li
440.435 297.055 li
433.335 297.055 li
436.195 298.475 438.605 300.645 440.325 303.305 cv
cp
430.705 295.985 mo
432.425 295.985 li
433.835 291.385 436.725 288.355 438.865 287.205 cv
433.545 287.775 428.975 290.845 426.345 295.205 cv
427.855 295.285 429.315 295.555 430.705 295.985 cv
cp
440.435 287.765 mo
439.145 287.865 435.525 290.735 433.565 295.985 cv
440.435 295.985 li
440.435 287.765 li
cp
441.505 287.755 mo
441.505 295.985 li
448.025 295.985 li
445.965 291.215 442.745 287.765 441.505 287.755 cv
cp
449.165 295.985 mo
455.455 295.985 li
452.985 291.365 448.425 288.035 443.035 287.275 cv
444.985 288.585 447.505 291.925 449.165 295.985 cv
cp
458.695 335.805 mo
458.695 335.405 458.375 335.085 457.975 335.085 cv
457.575 335.085 457.255 335.405 457.255 335.805 cv
457.255 336.205 457.575 336.525 457.975 336.525 cv
458.375 336.525 458.695 336.205 458.695 335.805 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
443.135 311.695 mo
443.155 312.115 443.175 312.535 443.175 312.955 cv
443.175 315.435 442.675 317.785 441.765 319.925 cv
444.225 319.295 446.815 315.865 448.385 311.695 cv
443.135 311.695 li
449.535 311.695 mo
448.195 315.485 446.015 318.845 443.565 320.325 cv
448.725 319.425 453.065 316.165 455.445 311.695 cv
449.535 311.695 li
cp
455.965 310.635 mo
456.825 308.705 457.325 306.595 457.395 304.375 cv
450.915 304.375 li
450.895 306.385 450.525 308.555 449.885 310.635 cv
455.965 310.635 li
cp
441.505 304.375 mo
441.505 305.425 li
442.265 307.045 442.785 308.795 443.025 310.635 cv
448.765 310.635 li
449.425 308.595 449.825 306.435 449.855 304.375 cv
441.505 304.375 li
455.965 297.055 mo
449.585 297.055 li
450.295 299.045 450.785 301.185 450.895 303.305 cv
457.395 303.305 li
457.325 301.085 456.825 298.975 455.965 297.055 cv
cp
441.505 303.305 mo
449.835 303.305 li
449.715 301.125 449.195 299.005 448.455 297.055 cv
441.505 297.055 li
441.505 303.305 li
cp
440.325 303.305 mo
440.435 303.305 li
440.435 297.055 li
433.335 297.055 li
436.195 298.475 438.605 300.645 440.325 303.305 cv
cp
430.705 295.985 mo
432.425 295.985 li
433.835 291.385 436.725 288.355 438.865 287.205 cv
433.545 287.775 428.975 290.845 426.345 295.205 cv
427.855 295.285 429.315 295.555 430.705 295.985 cv
cp
440.435 287.765 mo
439.145 287.865 435.525 290.735 433.565 295.985 cv
440.435 295.985 li
440.435 287.765 li
cp
441.505 287.755 mo
441.505 295.985 li
448.025 295.985 li
445.965 291.215 442.745 287.765 441.505 287.755 cv
cp
449.165 295.985 mo
455.455 295.985 li
452.985 291.365 448.425 288.035 443.035 287.275 cv
444.985 288.585 447.505 291.925 449.165 295.985 cv
cp
458.695 335.805 mo
458.695 335.405 458.375 335.085 457.975 335.085 cv
457.575 335.085 457.255 335.405 457.255 335.805 cv
457.255 336.205 457.575 336.525 457.975 336.525 cv
458.375 336.525 458.695 336.205 458.695 335.805 cv
cp
472.105 335.125 mo
477.325 335.125 li
472.105 336.485 mo
477.325 336.485 li
1 /0 /CSD get_res sepcs
1 sep
@
407.825 313.695 mo
407.875 314.575 407.995 315.445 408.175 316.315 cv
408.945 316.105 li
408.775 315.315 408.665 314.505 408.615 313.695 cv
407.825 313.695 li
cp
443.045 311.725 mo
442.995 310.845 442.885 309.965 442.695 309.105 cv
441.935 309.305 li
442.105 310.105 442.215 310.915 442.255 311.725 cv
443.045 311.725 li
cp
421.875 329.795 mo
422.725 329.965 423.585 330.075 424.455 330.125 cv
424.455 329.335 li
424.055 329.315 423.655 329.275 423.265 329.225 cv
422.865 329.175 422.475 329.105 422.085 329.025 cv
421.875 329.795 li
cp
428.995 295.625 mo
428.145 295.455 427.285 295.345 426.425 295.295 cv
426.425 296.085 li
426.995 296.115 427.565 296.175 428.135 296.265 cv
428.355 296.305 428.575 296.345 428.795 296.385 cv
428.995 295.625 li
cp
428.795 329.025 mo
428.005 329.185 427.215 329.285 426.425 329.335 cv
426.425 330.125 li
427.285 330.075 428.145 329.965 428.995 329.795 cv
428.795 329.025 li
cp
422.085 296.385 mo
422.125 296.375 422.175 296.365 422.215 296.355 cv
422.955 296.215 423.705 296.125 424.455 296.085 cv
424.455 295.295 li
423.585 295.345 422.725 295.455 421.875 295.625 cv
422.085 296.385 li
cp
432.915 327.635 mo
432.195 327.985 431.455 328.285 430.695 328.525 cv
430.905 329.295 li
431.725 329.025 432.535 328.695 433.315 328.315 cv
432.915 327.635 li
cp
417.955 297.785 mo
418.675 297.435 419.415 297.135 420.175 296.885 cv
419.975 296.125 li
419.145 296.385 418.345 296.715 417.565 297.095 cv
417.955 297.785 li
cp
410.415 320.245 mo
410.195 319.825 409.995 319.385 409.815 318.945 cv
409.685 318.635 409.565 318.325 409.465 318.005 cv
408.695 318.215 li
408.975 319.045 409.325 319.855 409.725 320.645 cv
410.415 320.245 li
cp
440.465 305.165 mo
440.765 305.755 441.025 306.345 441.255 306.955 cv
441.305 307.105 441.365 307.255 441.415 307.405 cv
442.175 307.205 li
441.895 306.365 441.555 305.555 441.145 304.775 cv
440.465 305.165 li
cp
436.555 325.225 mo
435.955 325.745 435.305 326.225 434.635 326.665 cv
435.025 327.345 li
435.765 326.875 436.455 326.355 437.115 325.775 cv
436.555 325.225 li
cp
414.315 300.195 mo
414.925 299.665 415.565 299.185 416.245 298.755 cv
415.845 298.065 li
415.115 298.535 414.415 299.065 413.755 299.635 cv
414.315 300.195 li
cp
412.905 323.845 mo
412.365 323.245 411.865 322.615 411.415 321.945 cv
410.725 322.335 li
411.215 323.065 411.755 323.755 412.345 324.405 cv
412.905 323.845 li
cp
437.965 301.575 mo
438.075 301.685 438.175 301.805 438.275 301.915 cv
438.695 302.415 439.095 302.935 439.465 303.475 cv
440.145 303.075 li
439.655 302.355 439.115 301.665 438.525 301.015 cv
437.965 301.575 li
cp
439.465 321.945 mo
439.295 322.195 439.115 322.435 438.935 322.685 cv
438.625 323.085 438.305 323.475 437.965 323.845 cv
438.525 324.405 li
439.115 323.755 439.655 323.065 440.145 322.335 cv
439.465 321.945 li
cp
411.415 303.475 mo
411.675 303.075 411.965 302.695 412.265 302.325 cv
412.475 302.065 412.685 301.815 412.905 301.575 cv
412.345 301.015 li
411.755 301.665 411.215 302.355 410.725 303.075 cv
411.415 303.475 li
cp
416.245 326.665 mo
415.565 326.225 414.925 325.745 414.315 325.225 cv
413.755 325.775 li
414.415 326.355 415.115 326.875 415.845 327.345 cv
416.245 326.665 li
cp
434.635 298.755 mo
435.305 299.185 435.955 299.665 436.555 300.195 cv
437.115 299.635 li
436.455 299.065 435.765 298.535 435.025 298.065 cv
434.635 298.755 li
cp
441.415 318.005 mo
441.155 318.775 440.835 319.525 440.465 320.245 cv
441.145 320.645 li
441.555 319.855 441.895 319.045 442.175 318.215 cv
441.415 318.005 li
cp
409.465 307.405 mo
409.725 306.635 410.035 305.895 410.415 305.165 cv
409.725 304.775 li
409.325 305.555 408.975 306.365 408.695 307.205 cv
409.465 307.405 li
cp
420.175 328.525 mo
419.415 328.285 418.675 327.985 417.955 327.635 cv
417.565 328.315 li
418.345 328.695 419.145 329.025 419.975 329.295 cv
420.175 328.525 li
cp
430.695 296.885 mo
431.455 297.135 432.195 297.435 432.915 297.785 cv
433.315 297.095 li
432.535 296.715 431.725 296.385 430.905 296.125 cv
430.695 296.885 li
cp
408.615 311.725 mo
408.665 310.915 408.775 310.105 408.945 309.305 cv
408.175 309.105 li
407.995 309.965 407.875 310.845 407.825 311.725 cv
408.615 311.725 li
cp
442.255 313.695 mo
442.215 314.505 442.105 315.315 441.935 316.105 cv
442.695 316.315 li
442.885 315.445 442.995 314.575 443.045 313.695 cv
442.255 313.695 li
cp
434.255 324.075 mo
431.575 324.075 li
431.115 324.975 li
433.435 324.985 li
434.255 324.075 li
cp
416.825 324.075 mo
417.475 324.985 li
419.405 324.975 li
419.015 324.095 li
416.825 324.075 li
cp
423.715 324.935 mo
423.715 324.025 li
421.775 324.025 li
422.125 324.855 li
423.715 324.935 li
cp
428.455 324.935 mo
428.965 324.025 li
427.075 324.025 li
427.075 324.975 li
428.455 324.935 li
cp
434.255 300.985 mo
433.435 300.085 li
431.115 300.095 li
431.575 300.985 li
434.255 300.985 li
cp
416.825 300.985 mo
419.015 300.975 li
419.405 300.095 li
417.475 300.085 li
416.825 300.985 li
cp
423.715 300.135 mo
422.125 300.215 li
421.775 301.035 li
423.715 301.035 li
423.715 300.135 li
cp
428.455 300.135 mo
427.075 300.095 li
427.075 301.035 li
428.965 301.035 li
428.455 300.135 li
cp
440.395 313.165 mo
441.515 313.165 li
441.515 312.255 li
440.395 312.255 li
440.395 313.165 li
cp
439.945 305.645 mo
438.975 305.645 li
439.255 306.545 li
440.255 306.545 li
439.945 305.645 li
cp
438.855 314.515 mo
439.765 314.515 li
439.835 313.865 439.835 313.395 439.835 312.725 cv
439.835 312.005 439.825 311.525 439.755 310.825 cv
438.835 310.825 li
438.915 311.525 438.925 312.005 438.925 312.725 cv
438.925 313.395 438.925 313.855 438.855 314.515 cv
cp
439.305 308.035 mo
438.955 306.545 438.585 305.625 437.925 304.285 cv
436.975 304.285 li
437.635 305.615 438.005 306.545 438.375 308.035 cv
439.305 308.035 li
cp
437.845 313.165 mo
437.845 312.255 li
434.245 312.255 li
434.255 313.165 li
437.845 313.165 li
cp
434.455 298.845 mo
433.605 298.975 li
434.565 299.965 435.145 300.835 435.895 302.115 cv
436.845 302.115 li
436.105 300.885 435.425 299.895 434.455 298.845 cv
cp
436.665 305.645 mo
433.235 305.645 li
433.505 306.545 li
436.975 306.545 li
436.665 305.645 li
cp
432.025 314.515 mo
432.945 314.515 li
432.985 313.845 432.975 313.365 432.975 312.675 cv
432.975 311.975 432.985 311.495 432.945 310.805 cv
432.025 310.805 li
432.075 311.495 432.065 311.975 432.065 312.675 cv
432.065 313.365 432.075 313.845 432.025 314.515 cv
cp
432.645 308.035 mo
432.435 306.585 432.245 305.665 431.835 304.285 cv
430.915 304.285 li
431.315 305.665 431.505 306.585 431.725 308.035 cv
432.645 308.035 li
cp
439.125 319.675 mo
439.865 319.675 li
440.035 318.765 li
439.435 318.765 li
439.125 319.675 li
cp
438.055 320.915 mo
438.655 319.645 438.945 318.665 439.265 317.265 cv
438.335 317.265 li
438.005 318.665 437.695 319.645 437.085 320.915 cv
438.055 320.915 li
cp
436.265 322.915 mo
435.455 324.195 434.925 325.075 433.855 326.095 cv
435.015 326.095 li
436.035 325.045 436.515 324.165 437.275 322.915 cv
436.265 322.915 li
cp
436.665 319.675 mo
436.975 318.765 li
433.475 318.765 li
433.295 319.675 li
436.665 319.675 li
cp
431.855 320.955 mo
432.225 319.655 432.485 318.635 432.675 317.265 cv
431.755 317.265 li
431.545 318.635 431.285 319.655 430.915 320.955 cv
431.855 320.955 li
cp
430.325 326.095 mo
430.895 324.935 430.965 324.155 431.385 322.915 cv
430.435 322.915 li
430.005 324.155 429.925 324.945 429.365 326.095 cv
430.325 326.095 li
cp
431.115 302.115 mo
430.655 300.825 430.365 300.095 429.735 298.895 cv
428.815 298.895 li
429.435 300.095 429.725 300.825 430.185 302.115 cv
431.115 302.115 li
cp
430.305 305.645 mo
427.075 305.645 li
427.075 306.545 li
430.565 306.545 li
430.305 305.645 li
cp
427.075 313.165 mo
430.665 313.165 li
430.665 312.255 li
427.075 312.255 li
427.075 313.165 li
cp
430.445 319.675 mo
430.665 318.765 li
427.075 318.765 li
427.075 319.675 li
430.445 319.675 li
cp
424.985 297.165 mo
425.895 297.165 li
425.895 295.295 li
424.985 295.295 li
424.985 297.165 li
cp
424.985 302.115 mo
425.895 302.115 li
425.895 298.895 li
424.985 298.895 li
424.985 302.115 li
cp
424.985 308.075 mo
425.895 308.075 li
425.895 304.375 li
424.985 304.375 li
424.985 308.075 li
cp
424.985 314.515 mo
425.895 314.515 li
425.895 310.825 li
424.985 310.825 li
424.985 314.515 li
cp
424.985 320.955 mo
425.895 320.955 li
425.895 317.265 li
424.985 317.265 li
424.985 320.955 li
cp
424.985 326.095 mo
425.895 326.095 li
425.895 322.915 li
424.985 322.915 li
424.985 326.095 li
cp
424.985 328.235 mo
424.985 330.105 li
425.895 330.105 li
425.895 328.235 li
424.985 328.235 li
cp
420.025 318.765 mo
420.355 319.675 li
423.715 319.675 li
423.715 318.765 li
420.025 318.765 li
cp
419.845 306.545 mo
423.715 306.545 li
423.715 305.645 li
420.025 305.645 li
419.845 306.545 li
cp
419.755 313.165 mo
423.715 313.165 li
423.715 312.255 li
419.755 312.255 li
419.755 313.165 li
cp
420.335 302.115 mo
420.805 300.825 420.985 300.095 421.605 298.895 cv
420.685 298.895 li
420.055 300.095 419.875 300.825 419.405 302.115 cv
420.335 302.115 li
cp
421.545 326.095 mo
420.975 324.945 420.665 324.155 420.235 322.915 cv
419.275 322.915 li
419.705 324.155 420.015 324.935 420.585 326.095 cv
421.545 326.095 li
cp
418.535 320.955 mo
419.475 320.955 li
419.105 319.655 418.995 318.635 418.795 317.265 cv
417.865 317.265 li
418.065 318.635 418.165 319.655 418.535 320.955 cv
cp
417.865 308.035 mo
418.785 308.035 li
419.005 306.585 419.195 305.665 419.605 304.285 cv
418.675 304.285 li
418.265 305.665 418.085 306.585 417.865 308.035 cv
cp
418.495 314.515 mo
418.455 313.845 418.455 313.365 418.455 312.675 cv
418.455 311.975 418.445 311.495 418.495 310.805 cv
417.585 310.805 li
417.535 311.495 417.545 311.975 417.545 312.675 cv
417.545 313.365 417.535 313.845 417.585 314.515 cv
418.495 314.515 li
cp
414.605 305.645 mo
414.245 306.545 li
417.065 306.545 li
417.405 305.645 li
414.605 305.645 li
cp
416.735 298.855 mo
415.765 299.895 414.895 300.885 414.165 302.115 cv
415.105 302.115 li
415.865 300.835 416.745 299.845 417.705 298.855 cv
416.735 298.855 li
cp
414.485 319.675 mo
417.345 319.675 li
417.035 318.765 li
414.145 318.765 li
414.485 319.675 li
cp
417.165 326.095 mo
416.165 325.085 415.565 324.115 414.815 322.875 cv
413.815 322.875 li
414.525 324.105 415.075 325.065 416.025 326.095 cv
417.165 326.095 li
cp
413.165 313.165 mo
416.465 313.165 li
416.465 312.255 li
413.165 312.255 li
413.165 313.165 li
cp
411.965 308.035 mo
412.895 308.035 li
413.255 306.545 413.475 305.615 414.135 304.285 cv
413.185 304.285 li
412.525 305.625 412.315 306.545 411.965 308.035 cv
cp
413.165 320.955 mo
414.135 320.955 li
413.525 319.695 413.215 318.665 412.885 317.265 cv
411.955 317.265 li
412.275 318.665 412.565 319.685 413.165 320.955 cv
cp
410.785 319.675 mo
412.005 319.675 li
411.695 318.765 li
410.445 318.765 li
410.785 319.675 li
cp
410.635 305.645 mo
410.275 306.545 li
411.455 306.545 li
411.795 305.645 li
410.635 305.645 li
cp
409.335 313.165 mo
410.445 313.165 li
410.445 312.255 li
409.335 312.255 li
409.335 313.165 li
cp
412.345 314.515 mo
412.275 313.855 412.295 313.395 412.295 312.725 cv
412.295 312.005 412.335 311.525 412.415 310.825 cv
411.505 310.825 li
411.425 311.525 411.395 312.005 411.395 312.725 cv
411.395 313.395 411.365 313.865 411.435 314.515 cv
412.345 314.515 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
407.825 313.695 mo
407.875 314.575 407.995 315.445 408.175 316.315 cv
408.945 316.105 li
408.775 315.315 408.665 314.505 408.615 313.695 cv
407.825 313.695 li
cp
443.045 311.725 mo
442.995 310.845 442.885 309.965 442.695 309.105 cv
441.935 309.305 li
442.105 310.105 442.215 310.915 442.255 311.725 cv
443.045 311.725 li
cp
421.875 329.795 mo
422.725 329.965 423.585 330.075 424.455 330.125 cv
424.455 329.335 li
424.055 329.315 423.655 329.275 423.265 329.225 cv
422.865 329.175 422.475 329.105 422.085 329.025 cv
421.875 329.795 li
cp
428.995 295.625 mo
428.145 295.455 427.285 295.345 426.425 295.295 cv
426.425 296.085 li
426.995 296.115 427.565 296.175 428.135 296.265 cv
428.355 296.305 428.575 296.345 428.795 296.385 cv
428.995 295.625 li
cp
428.795 329.025 mo
428.005 329.185 427.215 329.285 426.425 329.335 cv
426.425 330.125 li
427.285 330.075 428.145 329.965 428.995 329.795 cv
428.795 329.025 li
cp
422.085 296.385 mo
422.125 296.375 422.175 296.365 422.215 296.355 cv
422.955 296.215 423.705 296.125 424.455 296.085 cv
424.455 295.295 li
423.585 295.345 422.725 295.455 421.875 295.625 cv
422.085 296.385 li
cp
432.915 327.635 mo
432.195 327.985 431.455 328.285 430.695 328.525 cv
430.905 329.295 li
431.725 329.025 432.535 328.695 433.315 328.315 cv
432.915 327.635 li
cp
417.955 297.785 mo
418.675 297.435 419.415 297.135 420.175 296.885 cv
419.975 296.125 li
419.145 296.385 418.345 296.715 417.565 297.095 cv
417.955 297.785 li
cp
410.415 320.245 mo
410.195 319.825 409.995 319.385 409.815 318.945 cv
409.685 318.635 409.565 318.325 409.465 318.005 cv
408.695 318.215 li
408.975 319.045 409.325 319.855 409.725 320.645 cv
410.415 320.245 li
cp
440.465 305.165 mo
440.765 305.755 441.025 306.345 441.255 306.955 cv
441.305 307.105 441.365 307.255 441.415 307.405 cv
442.175 307.205 li
441.895 306.365 441.555 305.555 441.145 304.775 cv
440.465 305.165 li
cp
436.555 325.225 mo
435.955 325.745 435.305 326.225 434.635 326.665 cv
435.025 327.345 li
435.765 326.875 436.455 326.355 437.115 325.775 cv
436.555 325.225 li
cp
414.315 300.195 mo
414.925 299.665 415.565 299.185 416.245 298.755 cv
415.845 298.065 li
415.115 298.535 414.415 299.065 413.755 299.635 cv
414.315 300.195 li
cp
412.905 323.845 mo
412.365 323.245 411.865 322.615 411.415 321.945 cv
410.725 322.335 li
411.215 323.065 411.755 323.755 412.345 324.405 cv
412.905 323.845 li
cp
437.965 301.575 mo
438.075 301.685 438.175 301.805 438.275 301.915 cv
438.695 302.415 439.095 302.935 439.465 303.475 cv
440.145 303.075 li
439.655 302.355 439.115 301.665 438.525 301.015 cv
437.965 301.575 li
cp
439.465 321.945 mo
439.295 322.195 439.115 322.435 438.935 322.685 cv
438.625 323.085 438.305 323.475 437.965 323.845 cv
438.525 324.405 li
439.115 323.755 439.655 323.065 440.145 322.335 cv
439.465 321.945 li
cp
411.415 303.475 mo
411.675 303.075 411.965 302.695 412.265 302.325 cv
412.475 302.065 412.685 301.815 412.905 301.575 cv
412.345 301.015 li
411.755 301.665 411.215 302.355 410.725 303.075 cv
411.415 303.475 li
cp
416.245 326.665 mo
415.565 326.225 414.925 325.745 414.315 325.225 cv
413.755 325.775 li
414.415 326.355 415.115 326.875 415.845 327.345 cv
416.245 326.665 li
cp
434.635 298.755 mo
435.305 299.185 435.955 299.665 436.555 300.195 cv
437.115 299.635 li
436.455 299.065 435.765 298.535 435.025 298.065 cv
434.635 298.755 li
cp
441.415 318.005 mo
441.155 318.775 440.835 319.525 440.465 320.245 cv
441.145 320.645 li
441.555 319.855 441.895 319.045 442.175 318.215 cv
441.415 318.005 li
cp
409.465 307.405 mo
409.725 306.635 410.035 305.895 410.415 305.165 cv
409.725 304.775 li
409.325 305.555 408.975 306.365 408.695 307.205 cv
409.465 307.405 li
cp
420.175 328.525 mo
419.415 328.285 418.675 327.985 417.955 327.635 cv
417.565 328.315 li
418.345 328.695 419.145 329.025 419.975 329.295 cv
420.175 328.525 li
cp
430.695 296.885 mo
431.455 297.135 432.195 297.435 432.915 297.785 cv
433.315 297.095 li
432.535 296.715 431.725 296.385 430.905 296.125 cv
430.695 296.885 li
cp
408.615 311.725 mo
408.665 310.915 408.775 310.105 408.945 309.305 cv
408.175 309.105 li
407.995 309.965 407.875 310.845 407.825 311.725 cv
408.615 311.725 li
cp
442.255 313.695 mo
442.215 314.505 442.105 315.315 441.935 316.105 cv
442.695 316.315 li
442.885 315.445 442.995 314.575 443.045 313.695 cv
442.255 313.695 li
cp
434.255 324.075 mo
431.575 324.075 li
431.115 324.975 li
433.435 324.985 li
434.255 324.075 li
cp
416.825 324.075 mo
417.475 324.985 li
419.405 324.975 li
419.015 324.095 li
416.825 324.075 li
cp
423.715 324.935 mo
423.715 324.025 li
421.775 324.025 li
422.125 324.855 li
423.715 324.935 li
cp
428.455 324.935 mo
428.965 324.025 li
427.075 324.025 li
427.075 324.975 li
428.455 324.935 li
cp
434.255 300.985 mo
433.435 300.085 li
431.115 300.095 li
431.575 300.985 li
434.255 300.985 li
cp
416.825 300.985 mo
419.015 300.975 li
419.405 300.095 li
417.475 300.085 li
416.825 300.985 li
cp
423.715 300.135 mo
422.125 300.215 li
421.775 301.035 li
423.715 301.035 li
423.715 300.135 li
cp
428.455 300.135 mo
427.075 300.095 li
427.075 301.035 li
428.965 301.035 li
428.455 300.135 li
cp
440.395 313.165 mo
441.515 313.165 li
441.515 312.255 li
440.395 312.255 li
440.395 313.165 li
cp
439.945 305.645 mo
438.975 305.645 li
439.255 306.545 li
440.255 306.545 li
439.945 305.645 li
cp
438.855 314.515 mo
439.765 314.515 li
439.835 313.865 439.835 313.395 439.835 312.725 cv
439.835 312.005 439.825 311.525 439.755 310.825 cv
438.835 310.825 li
438.915 311.525 438.925 312.005 438.925 312.725 cv
438.925 313.395 438.925 313.855 438.855 314.515 cv
cp
439.305 308.035 mo
438.955 306.545 438.585 305.625 437.925 304.285 cv
436.975 304.285 li
437.635 305.615 438.005 306.545 438.375 308.035 cv
439.305 308.035 li
cp
437.845 313.165 mo
437.845 312.255 li
434.245 312.255 li
434.255 313.165 li
437.845 313.165 li
cp
434.455 298.845 mo
433.605 298.975 li
434.565 299.965 435.145 300.835 435.895 302.115 cv
436.845 302.115 li
436.105 300.885 435.425 299.895 434.455 298.845 cv
cp
436.665 305.645 mo
433.235 305.645 li
433.505 306.545 li
436.975 306.545 li
436.665 305.645 li
cp
432.025 314.515 mo
432.945 314.515 li
432.985 313.845 432.975 313.365 432.975 312.675 cv
432.975 311.975 432.985 311.495 432.945 310.805 cv
432.025 310.805 li
432.075 311.495 432.065 311.975 432.065 312.675 cv
432.065 313.365 432.075 313.845 432.025 314.515 cv
cp
432.645 308.035 mo
432.435 306.585 432.245 305.665 431.835 304.285 cv
430.915 304.285 li
431.315 305.665 431.505 306.585 431.725 308.035 cv
432.645 308.035 li
cp
439.125 319.675 mo
439.865 319.675 li
440.035 318.765 li
439.435 318.765 li
439.125 319.675 li
cp
438.055 320.915 mo
438.655 319.645 438.945 318.665 439.265 317.265 cv
438.335 317.265 li
438.005 318.665 437.695 319.645 437.085 320.915 cv
438.055 320.915 li
cp
436.265 322.915 mo
435.455 324.195 434.925 325.075 433.855 326.095 cv
435.015 326.095 li
436.035 325.045 436.515 324.165 437.275 322.915 cv
436.265 322.915 li
cp
436.665 319.675 mo
436.975 318.765 li
433.475 318.765 li
433.295 319.675 li
436.665 319.675 li
cp
431.855 320.955 mo
432.225 319.655 432.485 318.635 432.675 317.265 cv
431.755 317.265 li
431.545 318.635 431.285 319.655 430.915 320.955 cv
431.855 320.955 li
cp
430.325 326.095 mo
430.895 324.935 430.965 324.155 431.385 322.915 cv
430.435 322.915 li
430.005 324.155 429.925 324.945 429.365 326.095 cv
430.325 326.095 li
cp
431.115 302.115 mo
430.655 300.825 430.365 300.095 429.735 298.895 cv
428.815 298.895 li
429.435 300.095 429.725 300.825 430.185 302.115 cv
431.115 302.115 li
cp
430.305 305.645 mo
427.075 305.645 li
427.075 306.545 li
430.565 306.545 li
430.305 305.645 li
cp
427.075 313.165 mo
430.665 313.165 li
430.665 312.255 li
427.075 312.255 li
427.075 313.165 li
cp
430.445 319.675 mo
430.665 318.765 li
427.075 318.765 li
427.075 319.675 li
430.445 319.675 li
cp
424.985 297.165 mo
425.895 297.165 li
425.895 295.295 li
424.985 295.295 li
424.985 297.165 li
cp
424.985 302.115 mo
425.895 302.115 li
425.895 298.895 li
424.985 298.895 li
424.985 302.115 li
cp
424.985 308.075 mo
425.895 308.075 li
425.895 304.375 li
424.985 304.375 li
424.985 308.075 li
cp
424.985 314.515 mo
425.895 314.515 li
425.895 310.825 li
424.985 310.825 li
424.985 314.515 li
cp
424.985 320.955 mo
425.895 320.955 li
425.895 317.265 li
424.985 317.265 li
424.985 320.955 li
cp
424.985 326.095 mo
425.895 326.095 li
425.895 322.915 li
424.985 322.915 li
424.985 326.095 li
cp
424.985 328.235 mo
424.985 330.105 li
425.895 330.105 li
425.895 328.235 li
424.985 328.235 li
cp
420.025 318.765 mo
420.355 319.675 li
423.715 319.675 li
423.715 318.765 li
420.025 318.765 li
cp
419.845 306.545 mo
423.715 306.545 li
423.715 305.645 li
420.025 305.645 li
419.845 306.545 li
cp
419.755 313.165 mo
423.715 313.165 li
423.715 312.255 li
419.755 312.255 li
419.755 313.165 li
cp
420.335 302.115 mo
420.805 300.825 420.985 300.095 421.605 298.895 cv
420.685 298.895 li
420.055 300.095 419.875 300.825 419.405 302.115 cv
420.335 302.115 li
cp
421.545 326.095 mo
420.975 324.945 420.665 324.155 420.235 322.915 cv
419.275 322.915 li
419.705 324.155 420.015 324.935 420.585 326.095 cv
421.545 326.095 li
cp
418.535 320.955 mo
419.475 320.955 li
419.105 319.655 418.995 318.635 418.795 317.265 cv
417.865 317.265 li
418.065 318.635 418.165 319.655 418.535 320.955 cv
cp
417.865 308.035 mo
418.785 308.035 li
419.005 306.585 419.195 305.665 419.605 304.285 cv
418.675 304.285 li
418.265 305.665 418.085 306.585 417.865 308.035 cv
cp
418.495 314.515 mo
418.455 313.845 418.455 313.365 418.455 312.675 cv
418.455 311.975 418.445 311.495 418.495 310.805 cv
417.585 310.805 li
417.535 311.495 417.545 311.975 417.545 312.675 cv
417.545 313.365 417.535 313.845 417.585 314.515 cv
418.495 314.515 li
cp
414.605 305.645 mo
414.245 306.545 li
417.065 306.545 li
417.405 305.645 li
414.605 305.645 li
cp
416.735 298.855 mo
415.765 299.895 414.895 300.885 414.165 302.115 cv
415.105 302.115 li
415.865 300.835 416.745 299.845 417.705 298.855 cv
416.735 298.855 li
cp
414.485 319.675 mo
417.345 319.675 li
417.035 318.765 li
414.145 318.765 li
414.485 319.675 li
cp
417.165 326.095 mo
416.165 325.085 415.565 324.115 414.815 322.875 cv
413.815 322.875 li
414.525 324.105 415.075 325.065 416.025 326.095 cv
417.165 326.095 li
cp
413.165 313.165 mo
416.465 313.165 li
416.465 312.255 li
413.165 312.255 li
413.165 313.165 li
cp
411.965 308.035 mo
412.895 308.035 li
413.255 306.545 413.475 305.615 414.135 304.285 cv
413.185 304.285 li
412.525 305.625 412.315 306.545 411.965 308.035 cv
cp
413.165 320.955 mo
414.135 320.955 li
413.525 319.695 413.215 318.665 412.885 317.265 cv
411.955 317.265 li
412.275 318.665 412.565 319.685 413.165 320.955 cv
cp
410.785 319.675 mo
412.005 319.675 li
411.695 318.765 li
410.445 318.765 li
410.785 319.675 li
cp
410.635 305.645 mo
410.275 306.545 li
411.455 306.545 li
411.795 305.645 li
410.635 305.645 li
cp
409.335 313.165 mo
410.445 313.165 li
410.445 312.255 li
409.335 312.255 li
409.335 313.165 li
cp
412.345 314.515 mo
412.275 313.855 412.295 313.395 412.295 312.725 cv
412.295 312.005 412.335 311.525 412.415 310.825 cv
411.505 310.825 li
411.425 311.525 411.395 312.005 411.395 312.725 cv
411.395 313.395 411.365 313.865 411.435 314.515 cv
412.345 314.515 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MQPSPM+ArialMT*1 [15.856 0 0 -15.856 0 0 ]msf
414.305 367.055 mo
(S)sh
424.985 367.055 mo
(-)sh
430.305 367.055 mo
(CSCF)
[11.67 10.576 11.6542 0 ]xsh
171.415 450.905 mo
195.535 450.905 li
@
181.485 436.675 mo
191.445 436.785 199.605 428.885 199.715 419.015 cv
199.825 409.155 191.845 401.075 181.885 400.965 cv
175.145 400.895 168.915 404.555 165.755 410.455 cv
166.965 410.415 168.185 410.505 169.375 410.725 cv
171.385 411.085 173.335 411.795 175.105 412.815 cv
176.875 413.825 178.465 415.155 179.775 416.715 cv
181.085 418.265 182.125 420.045 182.815 421.955 cv
183.515 423.855 183.875 425.885 183.875 427.905 cv
183.875 428.975 183.775 430.045 183.585 431.085 cv
183.385 432.135 183.095 433.165 182.705 434.165 cv
182.365 435.035 181.965 435.875 181.485 436.675 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
181.485 436.675 mo
191.445 436.785 199.605 428.885 199.715 419.015 cv
199.825 409.155 191.845 401.075 181.885 400.965 cv
175.145 400.895 168.915 404.555 165.755 410.455 cv
166.965 410.415 168.185 410.505 169.375 410.725 cv
171.385 411.085 173.335 411.795 175.105 412.815 cv
176.875 413.825 178.465 415.155 179.775 416.715 cv
181.085 418.265 182.125 420.045 182.815 421.955 cv
183.515 423.855 183.875 425.885 183.875 427.905 cv
183.875 428.975 183.775 430.045 183.585 431.085 cv
183.385 432.135 183.095 433.165 182.705 434.165 cv
182.365 435.035 181.965 435.875 181.485 436.675 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
196.635 454.265 mo
219.525 454.265 li
219.525 447.775 li
196.635 447.775 li
196.635 454.265 li
cp
219.585 448.995 mo
220.625 448.995 li
220.625 453.045 li
219.625 453.045 li
219.585 448.995 li
cp
196.645 453.045 mo
195.535 453.045 li
195.535 448.995 li
196.645 448.995 li
196.645 453.045 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
196.635 454.265 mo
219.525 454.265 li
219.525 447.775 li
196.635 447.775 li
196.635 454.265 li
cp
219.585 448.995 mo
220.625 448.995 li
220.625 453.045 li
219.625 453.045 li
196.645 453.045 mo
195.535 453.045 li
195.535 448.995 li
196.645 448.995 li
1 /0 /CSD get_res sepcs
1 sep
@
183.935 426.895 mo
183.935 426.895 li
@
183.935 426.895 mo
183.955 427.315 183.975 427.735 183.975 428.155 cv
183.975 430.635 183.475 432.985 182.565 435.125 cv
185.025 434.495 187.615 431.065 189.185 426.895 cv
183.935 426.895 li
cp
190.335 426.895 mo
188.995 430.685 186.815 434.045 184.365 435.525 cv
189.525 434.625 193.865 431.365 196.245 426.895 cv
190.335 426.895 li
cp
196.765 425.835 mo
197.625 423.905 198.125 421.795 198.195 419.575 cv
191.715 419.575 li
191.695 421.585 191.325 423.755 190.685 425.835 cv
196.765 425.835 li
cp
182.305 419.575 mo
182.305 420.625 li
183.065 422.245 183.585 423.995 183.825 425.835 cv
189.565 425.835 li
190.225 423.795 190.625 421.635 190.655 419.575 cv
182.305 419.575 li
cp
196.765 412.255 mo
190.385 412.255 li
191.095 414.245 191.585 416.385 191.695 418.505 cv
198.195 418.505 li
198.125 416.285 197.625 414.175 196.765 412.255 cv
cp
182.305 418.505 mo
190.635 418.505 li
190.515 416.325 189.995 414.205 189.255 412.255 cv
182.305 412.255 li
182.305 418.505 li
cp
181.125 418.505 mo
181.235 418.505 li
181.235 412.255 li
174.135 412.255 li
176.995 413.675 179.405 415.845 181.125 418.505 cv
cp
171.505 411.185 mo
173.225 411.185 li
174.635 406.585 177.525 403.555 179.665 402.405 cv
174.345 402.975 169.775 406.045 167.145 410.405 cv
168.655 410.485 170.115 410.755 171.505 411.185 cv
cp
181.235 402.965 mo
179.945 403.065 176.325 405.935 174.365 411.185 cv
181.235 411.185 li
181.235 402.965 li
cp
182.305 402.955 mo
182.305 411.185 li
188.825 411.185 li
186.765 406.415 183.545 402.965 182.305 402.955 cv
cp
189.965 411.185 mo
196.255 411.185 li
193.785 406.565 189.225 403.235 183.835 402.475 cv
185.785 403.785 188.305 407.125 189.965 411.185 cv
cp
199.495 451.005 mo
199.495 450.605 199.175 450.285 198.775 450.285 cv
198.375 450.285 198.055 450.605 198.055 451.005 cv
198.055 451.405 198.375 451.725 198.775 451.725 cv
199.175 451.725 199.495 451.405 199.495 451.005 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
183.935 426.895 mo
183.955 427.315 183.975 427.735 183.975 428.155 cv
183.975 430.635 183.475 432.985 182.565 435.125 cv
185.025 434.495 187.615 431.065 189.185 426.895 cv
183.935 426.895 li
190.335 426.895 mo
188.995 430.685 186.815 434.045 184.365 435.525 cv
189.525 434.625 193.865 431.365 196.245 426.895 cv
190.335 426.895 li
cp
196.765 425.835 mo
197.625 423.905 198.125 421.795 198.195 419.575 cv
191.715 419.575 li
191.695 421.585 191.325 423.755 190.685 425.835 cv
196.765 425.835 li
cp
182.305 419.575 mo
182.305 420.625 li
183.065 422.245 183.585 423.995 183.825 425.835 cv
189.565 425.835 li
190.225 423.795 190.625 421.635 190.655 419.575 cv
182.305 419.575 li
196.765 412.255 mo
190.385 412.255 li
191.095 414.245 191.585 416.385 191.695 418.505 cv
198.195 418.505 li
198.125 416.285 197.625 414.175 196.765 412.255 cv
cp
182.305 418.505 mo
190.635 418.505 li
190.515 416.325 189.995 414.205 189.255 412.255 cv
182.305 412.255 li
182.305 418.505 li
cp
181.125 418.505 mo
181.235 418.505 li
181.235 412.255 li
174.135 412.255 li
176.995 413.675 179.405 415.845 181.125 418.505 cv
cp
171.505 411.185 mo
173.225 411.185 li
174.635 406.585 177.525 403.555 179.665 402.405 cv
174.345 402.975 169.775 406.045 167.145 410.405 cv
168.655 410.485 170.115 410.755 171.505 411.185 cv
cp
181.235 402.965 mo
179.945 403.065 176.325 405.935 174.365 411.185 cv
181.235 411.185 li
181.235 402.965 li
cp
182.305 402.955 mo
182.305 411.185 li
188.825 411.185 li
186.765 406.415 183.545 402.965 182.305 402.955 cv
cp
189.965 411.185 mo
196.255 411.185 li
193.785 406.565 189.225 403.235 183.835 402.475 cv
185.785 403.785 188.305 407.125 189.965 411.185 cv
cp
199.495 451.005 mo
199.495 450.605 199.175 450.285 198.775 450.285 cv
198.375 450.285 198.055 450.605 198.055 451.005 cv
198.055 451.405 198.375 451.725 198.775 451.725 cv
199.175 451.725 199.495 451.405 199.495 451.005 cv
cp
212.905 450.325 mo
218.125 450.325 li
212.905 451.685 mo
218.125 451.685 li
1 /0 /CSD get_res sepcs
1 sep
@
148.625 428.895 mo
148.675 429.775 148.795 430.645 148.975 431.515 cv
149.745 431.305 li
149.575 430.515 149.465 429.705 149.415 428.895 cv
148.625 428.895 li
cp
183.845 426.925 mo
183.795 426.045 183.685 425.165 183.495 424.305 cv
182.735 424.505 li
182.905 425.305 183.015 426.115 183.055 426.925 cv
183.845 426.925 li
cp
162.675 444.995 mo
163.525 445.165 164.385 445.275 165.255 445.325 cv
165.255 444.535 li
164.855 444.515 164.455 444.475 164.065 444.425 cv
163.665 444.375 163.275 444.305 162.885 444.225 cv
162.675 444.995 li
cp
169.795 410.825 mo
168.945 410.655 168.085 410.545 167.225 410.495 cv
167.225 411.285 li
167.795 411.315 168.365 411.375 168.935 411.465 cv
169.155 411.505 169.375 411.545 169.595 411.585 cv
169.795 410.825 li
cp
169.595 444.225 mo
168.805 444.385 168.015 444.485 167.225 444.535 cv
167.225 445.325 li
168.085 445.275 168.945 445.165 169.795 444.995 cv
169.595 444.225 li
cp
162.885 411.585 mo
162.925 411.575 162.975 411.565 163.015 411.555 cv
163.755 411.415 164.505 411.325 165.255 411.285 cv
165.255 410.495 li
164.385 410.545 163.525 410.655 162.675 410.825 cv
162.885 411.585 li
cp
173.715 442.835 mo
172.995 443.185 172.255 443.485 171.495 443.725 cv
171.705 444.495 li
172.525 444.225 173.335 443.895 174.115 443.515 cv
173.715 442.835 li
cp
158.755 412.985 mo
159.475 412.635 160.215 412.335 160.975 412.085 cv
160.775 411.325 li
159.945 411.585 159.145 411.915 158.365 412.295 cv
158.755 412.985 li
cp
151.215 435.445 mo
150.995 435.025 150.795 434.585 150.615 434.145 cv
150.485 433.835 150.365 433.525 150.265 433.205 cv
149.495 433.415 li
149.775 434.245 150.125 435.055 150.525 435.845 cv
151.215 435.445 li
cp
181.265 420.365 mo
181.565 420.955 181.825 421.545 182.055 422.155 cv
182.105 422.305 182.165 422.455 182.215 422.605 cv
182.975 422.405 li
182.695 421.565 182.355 420.755 181.945 419.975 cv
181.265 420.365 li
cp
177.355 440.425 mo
176.755 440.945 176.105 441.425 175.435 441.865 cv
175.825 442.545 li
176.565 442.075 177.255 441.555 177.915 440.975 cv
177.355 440.425 li
cp
155.115 415.395 mo
155.725 414.865 156.365 414.385 157.045 413.955 cv
156.645 413.265 li
155.915 413.735 155.215 414.265 154.555 414.835 cv
155.115 415.395 li
cp
153.705 439.045 mo
153.165 438.445 152.665 437.815 152.215 437.145 cv
151.525 437.535 li
152.015 438.265 152.555 438.955 153.145 439.605 cv
153.705 439.045 li
cp
178.765 416.775 mo
178.875 416.885 178.975 417.005 179.075 417.115 cv
179.495 417.615 179.895 418.135 180.265 418.675 cv
180.945 418.275 li
180.455 417.555 179.915 416.865 179.325 416.215 cv
178.765 416.775 li
cp
180.265 437.145 mo
180.095 437.395 179.915 437.635 179.735 437.885 cv
179.425 438.285 179.105 438.675 178.765 439.045 cv
179.325 439.605 li
179.915 438.955 180.455 438.265 180.945 437.535 cv
180.265 437.145 li
cp
152.215 418.675 mo
152.485 418.275 152.765 417.895 153.065 417.525 cv
153.275 417.265 153.485 417.015 153.705 416.775 cv
153.145 416.215 li
152.555 416.865 152.015 417.555 151.525 418.275 cv
152.215 418.675 li
cp
157.045 441.865 mo
156.365 441.425 155.725 440.945 155.115 440.425 cv
154.555 440.975 li
155.215 441.555 155.915 442.075 156.645 442.545 cv
157.045 441.865 li
cp
175.435 413.955 mo
176.105 414.385 176.755 414.865 177.355 415.395 cv
177.915 414.835 li
177.255 414.265 176.565 413.735 175.825 413.265 cv
175.435 413.955 li
cp
182.215 433.205 mo
181.955 433.975 181.635 434.725 181.265 435.445 cv
181.945 435.845 li
182.355 435.055 182.695 434.245 182.975 433.415 cv
182.215 433.205 li
cp
150.265 422.605 mo
150.525 421.835 150.835 421.095 151.215 420.365 cv
150.525 419.975 li
150.125 420.755 149.775 421.565 149.495 422.405 cv
150.265 422.605 li
cp
160.975 443.725 mo
160.215 443.485 159.475 443.185 158.755 442.835 cv
158.365 443.515 li
159.145 443.895 159.945 444.225 160.775 444.495 cv
160.975 443.725 li
cp
171.495 412.085 mo
172.255 412.335 172.995 412.635 173.715 412.985 cv
174.115 412.295 li
173.335 411.915 172.525 411.585 171.705 411.325 cv
171.495 412.085 li
cp
149.415 426.925 mo
149.465 426.115 149.575 425.305 149.745 424.505 cv
148.975 424.305 li
148.795 425.165 148.675 426.045 148.625 426.925 cv
149.415 426.925 li
cp
183.055 428.895 mo
183.015 429.705 182.905 430.515 182.735 431.305 cv
183.495 431.515 li
183.685 430.645 183.795 429.775 183.845 428.895 cv
183.055 428.895 li
cp
175.055 439.275 mo
172.375 439.275 li
171.915 440.175 li
174.235 440.185 li
175.055 439.275 li
cp
157.625 439.275 mo
158.275 440.185 li
160.205 440.175 li
159.815 439.295 li
157.625 439.275 li
cp
164.515 440.135 mo
164.515 439.225 li
162.575 439.225 li
162.925 440.055 li
164.515 440.135 li
cp
169.255 440.135 mo
169.765 439.225 li
167.875 439.225 li
167.875 440.175 li
169.255 440.135 li
cp
175.055 416.185 mo
174.235 415.285 li
171.915 415.295 li
172.375 416.185 li
175.055 416.185 li
cp
157.625 416.185 mo
159.815 416.175 li
160.205 415.295 li
158.275 415.285 li
157.625 416.185 li
cp
164.515 415.335 mo
162.925 415.415 li
162.575 416.235 li
164.515 416.235 li
164.515 415.335 li
cp
169.255 415.335 mo
167.875 415.295 li
167.875 416.235 li
169.765 416.235 li
169.255 415.335 li
cp
181.195 428.365 mo
182.315 428.365 li
182.315 427.455 li
181.195 427.455 li
181.195 428.365 li
cp
180.745 420.845 mo
179.775 420.845 li
180.055 421.745 li
181.055 421.745 li
180.745 420.845 li
cp
179.655 429.715 mo
180.565 429.715 li
180.635 429.065 180.635 428.595 180.635 427.925 cv
180.635 427.205 180.625 426.725 180.555 426.025 cv
179.635 426.025 li
179.715 426.725 179.725 427.205 179.725 427.925 cv
179.725 428.595 179.725 429.055 179.655 429.715 cv
cp
180.105 423.235 mo
179.755 421.745 179.385 420.825 178.725 419.485 cv
177.775 419.485 li
178.435 420.815 178.805 421.745 179.175 423.235 cv
180.105 423.235 li
cp
178.645 428.365 mo
178.645 427.455 li
175.045 427.455 li
175.055 428.365 li
178.645 428.365 li
cp
175.255 414.045 mo
174.405 414.175 li
175.365 415.165 175.945 416.035 176.695 417.315 cv
177.645 417.315 li
176.905 416.085 176.225 415.095 175.255 414.045 cv
cp
177.465 420.845 mo
174.035 420.845 li
174.305 421.745 li
177.775 421.745 li
177.465 420.845 li
cp
172.825 429.715 mo
173.745 429.715 li
173.785 429.045 173.775 428.565 173.775 427.875 cv
173.775 427.175 173.785 426.695 173.745 426.005 cv
172.825 426.005 li
172.875 426.695 172.865 427.175 172.865 427.875 cv
172.865 428.565 172.875 429.045 172.825 429.715 cv
cp
173.445 423.235 mo
173.235 421.785 173.045 420.865 172.635 419.485 cv
171.715 419.485 li
172.115 420.865 172.305 421.785 172.525 423.235 cv
173.445 423.235 li
cp
179.925 434.875 mo
180.665 434.875 li
180.835 433.965 li
180.235 433.965 li
179.925 434.875 li
cp
178.855 436.115 mo
179.455 434.845 179.745 433.865 180.065 432.465 cv
179.135 432.465 li
178.805 433.865 178.495 434.845 177.885 436.115 cv
178.855 436.115 li
cp
177.065 438.115 mo
176.255 439.395 175.725 440.275 174.655 441.295 cv
175.825 441.295 li
176.835 440.245 177.315 439.365 178.075 438.115 cv
177.065 438.115 li
cp
177.465 434.875 mo
177.775 433.965 li
174.275 433.965 li
174.095 434.875 li
177.465 434.875 li
cp
172.655 436.155 mo
173.025 434.855 173.285 433.835 173.475 432.465 cv
172.555 432.465 li
172.345 433.835 172.085 434.855 171.715 436.155 cv
172.655 436.155 li
cp
171.125 441.295 mo
171.695 440.135 171.765 439.355 172.185 438.115 cv
171.235 438.115 li
170.805 439.355 170.725 440.145 170.165 441.295 cv
171.125 441.295 li
cp
171.915 417.315 mo
171.455 416.025 171.165 415.295 170.535 414.095 cv
169.615 414.095 li
170.235 415.295 170.525 416.025 170.985 417.315 cv
171.915 417.315 li
cp
171.105 420.845 mo
167.875 420.845 li
167.875 421.745 li
171.365 421.745 li
171.105 420.845 li
cp
167.875 428.365 mo
171.465 428.365 li
171.465 427.455 li
167.875 427.455 li
167.875 428.365 li
cp
171.245 434.875 mo
171.465 433.965 li
167.875 433.965 li
167.875 434.875 li
171.245 434.875 li
cp
165.785 412.365 mo
166.695 412.365 li
166.695 410.495 li
165.785 410.495 li
165.785 412.365 li
cp
165.785 417.315 mo
166.695 417.315 li
166.695 414.095 li
165.785 414.095 li
165.785 417.315 li
cp
165.785 423.275 mo
166.695 423.275 li
166.695 419.575 li
165.785 419.575 li
165.785 423.275 li
cp
165.785 429.715 mo
166.695 429.715 li
166.695 426.025 li
165.785 426.025 li
165.785 429.715 li
cp
165.785 436.155 mo
166.695 436.155 li
166.695 432.465 li
165.785 432.465 li
165.785 436.155 li
cp
165.785 441.295 mo
166.695 441.295 li
166.695 438.115 li
165.785 438.115 li
165.785 441.295 li
cp
165.785 443.435 mo
165.785 445.305 li
166.695 445.305 li
166.695 443.435 li
165.785 443.435 li
cp
160.825 433.965 mo
161.155 434.875 li
164.515 434.875 li
164.515 433.965 li
160.825 433.965 li
cp
160.645 421.745 mo
164.515 421.745 li
164.515 420.845 li
160.825 420.845 li
160.645 421.745 li
cp
160.555 428.365 mo
164.515 428.365 li
164.515 427.455 li
160.555 427.455 li
160.555 428.365 li
cp
161.135 417.315 mo
161.605 416.025 161.785 415.295 162.405 414.095 cv
161.485 414.095 li
160.855 415.295 160.675 416.025 160.205 417.315 cv
161.135 417.315 li
cp
162.345 441.295 mo
161.775 440.145 161.465 439.355 161.035 438.115 cv
160.075 438.115 li
160.505 439.355 160.815 440.135 161.385 441.295 cv
162.345 441.295 li
cp
159.335 436.155 mo
160.275 436.155 li
159.905 434.855 159.795 433.835 159.595 432.465 cv
158.665 432.465 li
158.865 433.835 158.965 434.855 159.335 436.155 cv
cp
158.665 423.235 mo
159.585 423.235 li
159.805 421.785 159.995 420.865 160.405 419.485 cv
159.475 419.485 li
159.065 420.865 158.885 421.785 158.665 423.235 cv
cp
159.295 429.715 mo
159.255 429.045 159.255 428.565 159.255 427.875 cv
159.255 427.175 159.245 426.695 159.295 426.005 cv
158.385 426.005 li
158.335 426.695 158.345 427.175 158.345 427.875 cv
158.345 428.565 158.335 429.045 158.385 429.715 cv
159.295 429.715 li
cp
155.405 420.845 mo
155.045 421.745 li
157.865 421.745 li
158.205 420.845 li
155.405 420.845 li
cp
157.535 414.055 mo
156.565 415.095 155.695 416.085 154.965 417.315 cv
155.905 417.315 li
156.665 416.035 157.545 415.045 158.505 414.055 cv
157.535 414.055 li
cp
155.285 434.875 mo
158.145 434.875 li
157.835 433.965 li
154.945 433.965 li
155.285 434.875 li
cp
157.965 441.295 mo
156.965 440.285 156.365 439.315 155.615 438.075 cv
154.615 438.075 li
155.325 439.305 155.875 440.265 156.825 441.295 cv
157.965 441.295 li
cp
153.965 428.365 mo
157.265 428.365 li
157.265 427.455 li
153.965 427.455 li
153.965 428.365 li
cp
152.765 423.235 mo
153.695 423.235 li
154.055 421.745 154.275 420.815 154.935 419.485 cv
153.985 419.485 li
153.325 420.825 153.115 421.745 152.765 423.235 cv
cp
153.965 436.155 mo
154.935 436.155 li
154.325 434.895 154.015 433.865 153.685 432.465 cv
152.755 432.465 li
153.075 433.865 153.365 434.885 153.965 436.155 cv
cp
151.585 434.875 mo
152.805 434.875 li
152.495 433.965 li
151.245 433.965 li
151.585 434.875 li
cp
151.435 420.845 mo
151.075 421.745 li
152.255 421.745 li
152.595 420.845 li
151.435 420.845 li
cp
150.135 428.365 mo
151.245 428.365 li
151.245 427.455 li
150.135 427.455 li
150.135 428.365 li
cp
153.145 429.715 mo
153.075 429.055 153.095 428.595 153.095 427.925 cv
153.095 427.205 153.135 426.725 153.215 426.025 cv
152.305 426.025 li
152.225 426.725 152.195 427.205 152.195 427.925 cv
152.195 428.595 152.165 429.065 152.235 429.715 cv
153.145 429.715 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
148.625 428.895 mo
148.675 429.775 148.795 430.645 148.975 431.515 cv
149.745 431.305 li
149.575 430.515 149.465 429.705 149.415 428.895 cv
148.625 428.895 li
cp
183.845 426.925 mo
183.795 426.045 183.685 425.165 183.495 424.305 cv
182.735 424.505 li
182.905 425.305 183.015 426.115 183.055 426.925 cv
183.845 426.925 li
cp
162.675 444.995 mo
163.525 445.165 164.385 445.275 165.255 445.325 cv
165.255 444.535 li
164.855 444.515 164.455 444.475 164.065 444.425 cv
163.665 444.375 163.275 444.305 162.885 444.225 cv
162.675 444.995 li
cp
169.795 410.825 mo
168.945 410.655 168.085 410.545 167.225 410.495 cv
167.225 411.285 li
167.795 411.315 168.365 411.375 168.935 411.465 cv
169.155 411.505 169.375 411.545 169.595 411.585 cv
169.795 410.825 li
cp
169.595 444.225 mo
168.805 444.385 168.015 444.485 167.225 444.535 cv
167.225 445.325 li
168.085 445.275 168.945 445.165 169.795 444.995 cv
169.595 444.225 li
cp
162.885 411.585 mo
162.925 411.575 162.975 411.565 163.015 411.555 cv
163.755 411.415 164.505 411.325 165.255 411.285 cv
165.255 410.495 li
164.385 410.545 163.525 410.655 162.675 410.825 cv
162.885 411.585 li
cp
173.715 442.835 mo
172.995 443.185 172.255 443.485 171.495 443.725 cv
171.705 444.495 li
172.525 444.225 173.335 443.895 174.115 443.515 cv
173.715 442.835 li
cp
158.755 412.985 mo
159.475 412.635 160.215 412.335 160.975 412.085 cv
160.775 411.325 li
159.945 411.585 159.145 411.915 158.365 412.295 cv
158.755 412.985 li
cp
151.215 435.445 mo
150.995 435.025 150.795 434.585 150.615 434.145 cv
150.485 433.835 150.365 433.525 150.265 433.205 cv
149.495 433.415 li
149.775 434.245 150.125 435.055 150.525 435.845 cv
151.215 435.445 li
cp
181.265 420.365 mo
181.565 420.955 181.825 421.545 182.055 422.155 cv
182.105 422.305 182.165 422.455 182.215 422.605 cv
182.975 422.405 li
182.695 421.565 182.355 420.755 181.945 419.975 cv
181.265 420.365 li
cp
177.355 440.425 mo
176.755 440.945 176.105 441.425 175.435 441.865 cv
175.825 442.545 li
176.565 442.075 177.255 441.555 177.915 440.975 cv
177.355 440.425 li
cp
155.115 415.395 mo
155.725 414.865 156.365 414.385 157.045 413.955 cv
156.645 413.265 li
155.915 413.735 155.215 414.265 154.555 414.835 cv
155.115 415.395 li
cp
153.705 439.045 mo
153.165 438.445 152.665 437.815 152.215 437.145 cv
151.525 437.535 li
152.015 438.265 152.555 438.955 153.145 439.605 cv
153.705 439.045 li
cp
178.765 416.775 mo
178.875 416.885 178.975 417.005 179.075 417.115 cv
179.495 417.615 179.895 418.135 180.265 418.675 cv
180.945 418.275 li
180.455 417.555 179.915 416.865 179.325 416.215 cv
178.765 416.775 li
cp
180.265 437.145 mo
180.095 437.395 179.915 437.635 179.735 437.885 cv
179.425 438.285 179.105 438.675 178.765 439.045 cv
179.325 439.605 li
179.915 438.955 180.455 438.265 180.945 437.535 cv
180.265 437.145 li
cp
152.215 418.675 mo
152.485 418.275 152.765 417.895 153.065 417.525 cv
153.275 417.265 153.485 417.015 153.705 416.775 cv
153.145 416.215 li
152.555 416.865 152.015 417.555 151.525 418.275 cv
152.215 418.675 li
cp
157.045 441.865 mo
156.365 441.425 155.725 440.945 155.115 440.425 cv
154.555 440.975 li
155.215 441.555 155.915 442.075 156.645 442.545 cv
157.045 441.865 li
cp
175.435 413.955 mo
176.105 414.385 176.755 414.865 177.355 415.395 cv
177.915 414.835 li
177.255 414.265 176.565 413.735 175.825 413.265 cv
175.435 413.955 li
cp
182.215 433.205 mo
181.955 433.975 181.635 434.725 181.265 435.445 cv
181.945 435.845 li
182.355 435.055 182.695 434.245 182.975 433.415 cv
182.215 433.205 li
cp
150.265 422.605 mo
150.525 421.835 150.835 421.095 151.215 420.365 cv
150.525 419.975 li
150.125 420.755 149.775 421.565 149.495 422.405 cv
150.265 422.605 li
cp
160.975 443.725 mo
160.215 443.485 159.475 443.185 158.755 442.835 cv
158.365 443.515 li
159.145 443.895 159.945 444.225 160.775 444.495 cv
160.975 443.725 li
cp
171.495 412.085 mo
172.255 412.335 172.995 412.635 173.715 412.985 cv
174.115 412.295 li
173.335 411.915 172.525 411.585 171.705 411.325 cv
171.495 412.085 li
cp
149.415 426.925 mo
149.465 426.115 149.575 425.305 149.745 424.505 cv
148.975 424.305 li
148.795 425.165 148.675 426.045 148.625 426.925 cv
149.415 426.925 li
cp
183.055 428.895 mo
183.015 429.705 182.905 430.515 182.735 431.305 cv
183.495 431.515 li
183.685 430.645 183.795 429.775 183.845 428.895 cv
183.055 428.895 li
cp
175.055 439.275 mo
172.375 439.275 li
171.915 440.175 li
174.235 440.185 li
175.055 439.275 li
cp
157.625 439.275 mo
158.275 440.185 li
160.205 440.175 li
159.815 439.295 li
157.625 439.275 li
cp
164.515 440.135 mo
164.515 439.225 li
162.575 439.225 li
162.925 440.055 li
164.515 440.135 li
cp
169.255 440.135 mo
169.765 439.225 li
167.875 439.225 li
167.875 440.175 li
169.255 440.135 li
cp
175.055 416.185 mo
174.235 415.285 li
171.915 415.295 li
172.375 416.185 li
175.055 416.185 li
cp
157.625 416.185 mo
159.815 416.175 li
160.205 415.295 li
158.275 415.285 li
157.625 416.185 li
cp
164.515 415.335 mo
162.925 415.415 li
162.575 416.235 li
164.515 416.235 li
164.515 415.335 li
cp
169.255 415.335 mo
167.875 415.295 li
167.875 416.235 li
169.765 416.235 li
169.255 415.335 li
cp
181.195 428.365 mo
182.315 428.365 li
182.315 427.455 li
181.195 427.455 li
181.195 428.365 li
cp
180.745 420.845 mo
179.775 420.845 li
180.055 421.745 li
181.055 421.745 li
180.745 420.845 li
cp
179.655 429.715 mo
180.565 429.715 li
180.635 429.065 180.635 428.595 180.635 427.925 cv
180.635 427.205 180.625 426.725 180.555 426.025 cv
179.635 426.025 li
179.715 426.725 179.725 427.205 179.725 427.925 cv
179.725 428.595 179.725 429.055 179.655 429.715 cv
cp
180.105 423.235 mo
179.755 421.745 179.385 420.825 178.725 419.485 cv
177.775 419.485 li
178.435 420.815 178.805 421.745 179.175 423.235 cv
180.105 423.235 li
cp
178.645 428.365 mo
178.645 427.455 li
175.045 427.455 li
175.055 428.365 li
178.645 428.365 li
cp
175.255 414.045 mo
174.405 414.175 li
175.365 415.165 175.945 416.035 176.695 417.315 cv
177.645 417.315 li
176.905 416.085 176.225 415.095 175.255 414.045 cv
cp
177.465 420.845 mo
174.035 420.845 li
174.305 421.745 li
177.775 421.745 li
177.465 420.845 li
cp
172.825 429.715 mo
173.745 429.715 li
173.785 429.045 173.775 428.565 173.775 427.875 cv
173.775 427.175 173.785 426.695 173.745 426.005 cv
172.825 426.005 li
172.875 426.695 172.865 427.175 172.865 427.875 cv
172.865 428.565 172.875 429.045 172.825 429.715 cv
cp
173.445 423.235 mo
173.235 421.785 173.045 420.865 172.635 419.485 cv
171.715 419.485 li
172.115 420.865 172.305 421.785 172.525 423.235 cv
173.445 423.235 li
cp
179.925 434.875 mo
180.665 434.875 li
180.835 433.965 li
180.235 433.965 li
179.925 434.875 li
cp
178.855 436.115 mo
179.455 434.845 179.745 433.865 180.065 432.465 cv
179.135 432.465 li
178.805 433.865 178.495 434.845 177.885 436.115 cv
178.855 436.115 li
cp
177.065 438.115 mo
176.255 439.395 175.725 440.275 174.655 441.295 cv
175.825 441.295 li
176.835 440.245 177.315 439.365 178.075 438.115 cv
177.065 438.115 li
cp
177.465 434.875 mo
177.775 433.965 li
174.275 433.965 li
174.095 434.875 li
177.465 434.875 li
cp
172.655 436.155 mo
173.025 434.855 173.285 433.835 173.475 432.465 cv
172.555 432.465 li
172.345 433.835 172.085 434.855 171.715 436.155 cv
172.655 436.155 li
cp
171.125 441.295 mo
171.695 440.135 171.765 439.355 172.185 438.115 cv
171.235 438.115 li
170.805 439.355 170.725 440.145 170.165 441.295 cv
171.125 441.295 li
cp
171.915 417.315 mo
171.455 416.025 171.165 415.295 170.535 414.095 cv
169.615 414.095 li
170.235 415.295 170.525 416.025 170.985 417.315 cv
171.915 417.315 li
cp
171.105 420.845 mo
167.875 420.845 li
167.875 421.745 li
171.365 421.745 li
171.105 420.845 li
cp
167.875 428.365 mo
171.465 428.365 li
171.465 427.455 li
167.875 427.455 li
167.875 428.365 li
cp
171.245 434.875 mo
171.465 433.965 li
167.875 433.965 li
167.875 434.875 li
171.245 434.875 li
cp
165.785 412.365 mo
166.695 412.365 li
166.695 410.495 li
165.785 410.495 li
165.785 412.365 li
cp
165.785 417.315 mo
166.695 417.315 li
166.695 414.095 li
165.785 414.095 li
165.785 417.315 li
cp
165.785 423.275 mo
166.695 423.275 li
166.695 419.575 li
165.785 419.575 li
165.785 423.275 li
cp
165.785 429.715 mo
166.695 429.715 li
166.695 426.025 li
165.785 426.025 li
165.785 429.715 li
cp
165.785 436.155 mo
166.695 436.155 li
166.695 432.465 li
165.785 432.465 li
165.785 436.155 li
cp
165.785 441.295 mo
166.695 441.295 li
166.695 438.115 li
165.785 438.115 li
165.785 441.295 li
cp
165.785 443.435 mo
165.785 445.305 li
166.695 445.305 li
166.695 443.435 li
165.785 443.435 li
cp
160.825 433.965 mo
161.155 434.875 li
164.515 434.875 li
164.515 433.965 li
160.825 433.965 li
cp
160.645 421.745 mo
164.515 421.745 li
164.515 420.845 li
160.825 420.845 li
160.645 421.745 li
cp
160.555 428.365 mo
164.515 428.365 li
164.515 427.455 li
160.555 427.455 li
160.555 428.365 li
cp
161.135 417.315 mo
161.605 416.025 161.785 415.295 162.405 414.095 cv
161.485 414.095 li
160.855 415.295 160.675 416.025 160.205 417.315 cv
161.135 417.315 li
cp
162.345 441.295 mo
161.775 440.145 161.465 439.355 161.035 438.115 cv
160.075 438.115 li
160.505 439.355 160.815 440.135 161.385 441.295 cv
162.345 441.295 li
cp
159.335 436.155 mo
160.275 436.155 li
159.905 434.855 159.795 433.835 159.595 432.465 cv
158.665 432.465 li
158.865 433.835 158.965 434.855 159.335 436.155 cv
cp
158.665 423.235 mo
159.585 423.235 li
159.805 421.785 159.995 420.865 160.405 419.485 cv
159.475 419.485 li
159.065 420.865 158.885 421.785 158.665 423.235 cv
cp
159.295 429.715 mo
159.255 429.045 159.255 428.565 159.255 427.875 cv
159.255 427.175 159.245 426.695 159.295 426.005 cv
158.385 426.005 li
158.335 426.695 158.345 427.175 158.345 427.875 cv
158.345 428.565 158.335 429.045 158.385 429.715 cv
159.295 429.715 li
cp
155.405 420.845 mo
155.045 421.745 li
157.865 421.745 li
158.205 420.845 li
155.405 420.845 li
cp
157.535 414.055 mo
156.565 415.095 155.695 416.085 154.965 417.315 cv
155.905 417.315 li
156.665 416.035 157.545 415.045 158.505 414.055 cv
157.535 414.055 li
cp
155.285 434.875 mo
158.145 434.875 li
157.835 433.965 li
154.945 433.965 li
155.285 434.875 li
cp
157.965 441.295 mo
156.965 440.285 156.365 439.315 155.615 438.075 cv
154.615 438.075 li
155.325 439.305 155.875 440.265 156.825 441.295 cv
157.965 441.295 li
cp
153.965 428.365 mo
157.265 428.365 li
157.265 427.455 li
153.965 427.455 li
153.965 428.365 li
cp
152.765 423.235 mo
153.695 423.235 li
154.055 421.745 154.275 420.815 154.935 419.485 cv
153.985 419.485 li
153.325 420.825 153.115 421.745 152.765 423.235 cv
cp
153.965 436.155 mo
154.935 436.155 li
154.325 434.895 154.015 433.865 153.685 432.465 cv
152.755 432.465 li
153.075 433.865 153.365 434.885 153.965 436.155 cv
cp
151.585 434.875 mo
152.805 434.875 li
152.495 433.965 li
151.245 433.965 li
151.585 434.875 li
cp
151.435 420.845 mo
151.075 421.745 li
152.255 421.745 li
152.595 420.845 li
151.435 420.845 li
cp
150.135 428.365 mo
151.245 428.365 li
151.245 427.455 li
150.135 427.455 li
150.135 428.365 li
cp
153.145 429.715 mo
153.075 429.055 153.095 428.595 153.095 427.925 cv
153.095 427.205 153.135 426.725 153.215 426.025 cv
152.305 426.025 li
152.225 426.725 152.195 427.205 152.195 427.925 cv
152.195 428.595 152.165 429.065 152.235 429.715 cv
153.145 429.715 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MQPSPM+ArialMT*1 [15.832 0 0 -15.832 0 0 ]msf
158.095 482.339 mo
(I)sh
162.545 482.339 mo
(-)sh
167.865 482.339 mo
(CSCF)
[11.6682 10.5601 11.6682 0 ]xsh
358.145 454.505 mo
382.255 454.505 li
@
383.385 457.723 mo
406.705 457.723 li
406.705 451.115 li
383.385 451.115 li
383.385 457.723 li
cp
406.765 452.355 mo
407.825 452.355 li
407.825 456.485 li
406.805 456.485 li
406.765 452.355 li
cp
383.395 456.485 mo
382.255 456.485 li
382.255 452.355 li
383.395 452.355 li
383.395 456.485 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
383.385 457.723 mo
406.705 457.723 li
406.705 451.115 li
383.385 451.115 li
383.385 457.723 li
cp
406.765 452.355 mo
407.825 452.355 li
407.825 456.485 li
406.805 456.485 li
383.395 456.485 mo
382.255 456.485 li
382.255 452.355 li
383.395 452.355 li
1 /0 /CSD get_res sepcs
1 sep
@
336.875 403.705 mo
336.325 403.335 335.985 402.945 335.865 402.545 cv
335.845 402.465 335.835 402.375 335.825 402.295 cv
335.825 442.545 li
335.835 442.545 li
336.025 445.125 345.575 447.205 357.335 447.205 cv
369.095 447.205 378.645 445.125 378.835 442.545 cv
378.845 442.545 li
378.845 402.295 li
378.715 404.915 368.985 407.015 357.105 406.985 cv
347.905 406.965 339.795 405.655 336.905 403.725 cv
336.875 403.705 li
cp
378.845 402.245 mo
378.845 399.625 369.215 397.505 357.335 397.505 cv
345.455 397.505 335.825 399.625 335.825 402.245 cv
335.825 404.865 345.455 406.985 357.335 406.985 cv
369.215 406.985 378.845 404.865 378.845 402.245 cv
cp
386.295 454.405 mo
386.295 453.995 385.965 453.675 385.565 453.675 cv
385.155 453.675 384.835 453.995 384.835 454.405 cv
384.835 454.805 385.155 455.135 385.565 455.135 cv
385.965 455.135 386.295 454.805 386.295 454.405 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
336.875 403.705 mo
336.325 403.335 335.985 402.945 335.865 402.545 cv
335.845 402.465 335.835 402.375 335.825 402.295 cv
335.825 442.545 li
335.835 442.545 li
336.025 445.125 345.575 447.205 357.335 447.205 cv
369.095 447.205 378.645 445.125 378.835 442.545 cv
378.845 442.545 li
378.845 402.295 li
378.715 404.915 368.985 407.015 357.105 406.985 cv
347.905 406.965 339.795 405.655 336.905 403.725 cv
336.875 403.705 li
378.845 402.245 mo
378.845 399.625 369.215 397.505 357.335 397.505 cv
345.455 397.505 335.825 399.625 335.825 402.245 cv
335.825 404.865 345.455 406.985 357.335 406.985 cv
369.215 406.985 378.845 404.865 378.845 402.245 cv
cp
386.295 454.405 mo
386.295 453.995 385.965 453.675 385.565 453.675 cv
385.155 453.675 384.835 453.995 384.835 454.405 cv
384.835 454.805 385.155 455.135 385.565 455.135 cv
385.965 455.135 386.295 454.805 386.295 454.405 cv
cp
399.955 453.715 mo
405.285 453.715 li
399.955 455.095 mo
405.285 455.095 li
1 /0 /CSD get_res sepcs
1 sep
@
MQPSPM+ArialMT*1 [15.832 0 0 -15.832 0 0 ]msf
355.595 482.339 mo
(HSS)
[11.6682 10.5601 0 ]xsh
55.025 182.815 mo
55.025 312.415 li
220.625 312.415 li
@
61.745 320.815 mo
84.31 320.815 li
84.31 304.015 li
61.745 304.015 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
MQPSPM+ArialMT*1 [13.971 0 0 -13.971 0 0 ]msf
61.825 316.825 mo
(SIP)
[9.41656 3.77216 0 ]xsh
240.395 348.415 mo
240.395 427.615 li
220.625 427.615 li
@
220.625 447.385 mo
335.825 447.385 li
@
370.935 398.575 mo
370.935 312.415 li
407.825 312.415 li
@
407.825 332.185 mo
373.305 332.185 li
373.305 330.885 372.245 329.825 370.935 329.825 cv
369.635 329.825 368.575 330.885 368.575 332.185 cv
292.625 332.185 li
@
469.025 276.415 mo
469.025 143.215 li
@
457.745 218.215 mo
480.31 218.215 li
480.31 201.415 li
457.745 201.415 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
MQPSPM+ArialMT*1 [13.948 0 0 -13.948 0 0 ]msf
458.015 214.175 mo
(SIP)
[9.41498 3.76599 0 ]xsh
432.135 276.415 mo
432.135 52.875 li
341.615 52.875 li
@
420.855 127.785 mo
443.42 127.785 li
443.42 110.985 li
420.855 110.985 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
MQPSPM+ArialMT*1 [13.971 0 0 -13.971 0 0 ]msf
421.115 123.685 mo
(SIP)
[9.41656 3.77216 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/MQPSPM+ArialMT*1 uf
/MQPSPM+ArialMT uf
/ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
